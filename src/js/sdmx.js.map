{"version":3,"sources":["sdmx.ts"],"names":["SdmxIO","SdmxIO.constructor","SdmxIO.getLocale","SdmxIO.isSanitiseNames","SdmxIO.parseStructure","SdmxIO.registerParserProvider"],"mappings":";IAoCA;QAAAA;QA0BAC,CAACA;QAtBiBD,gBAASA,GAAvBA;YACIE,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA;QACzBA,CAACA;QACaF,sBAAeA,GAA7BA;YACIG,MAAMA,CAACA,MAAMA,CAACA,cAAcA,CAACA;QAEjCA,CAACA;QACaH,qBAAcA,GAA5BA,UAA6BA,CAASA;YAClCI,KAAKA,CAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA;YAC5BA,GAAGA,CAAAA,CAACA,GAAGA,CAACA,CAACA,GAACA,CAACA,EAACA,CAACA,GAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,EAACA,CAACA,EAAEA,EAAEA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,CAAAA,CAACA;oBAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA;gBAAAA,CAACA;gBAC9EA,IAAIA,CAACA,CAACA;oBACFA,KAAKA,CAACA,aAAaA,CAACA,CAACA;gBAEzBA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACaJ,6BAAsBA,GAApCA,UAAqCA,CAA4BA;YAC7DK,MAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QAE1BA,CAACA;QAxBaL,aAAMA,GAAWA,IAAIA,CAACA;QACtBA,qBAAcA,GAAYA,KAAKA,CAACA;QAChCA,aAAMA,GAAoCA,EAAEA,CAACA;QAuB/DA,aAACA;IAADA,CA1BA,AA0BCA,IAAA;IA1BY,cAAM,SA0BlB,CAAA","file":"sdmx.js","sourcesContent":["/// <amd-module name='sdmx'/>\nimport message = require(\"message\");\nimport commonreferences = require(\"commonreferences\");\nimport structure = require(\"structure\");\nimport parser = require(\"parser\");\nimport sdmx20 = require(\"sdmx20\");\ninterface Queryable {\n    getRegistry(): Registry;\n    getRepository(): Repository;\n}\nexport interface Registry {\n    // Registry\n    listDataflows(): Array<structure.Dataflow>;\n    clear(): void;\n    load(struct: message.StructureType): void;\n    unload(struct: message.StructureType): void;\n    findDataStructure(ref: commonreferences.Reference): structure.DataStructure;\n    findDataflow(ref: commonreferences.Reference): structure.Dataflow;\n    findCode(ref: commonreferences.Reference): structure.CodeType;\n    findCodelist(ref: commonreferences.Reference): structure.CodelistType;\n    findItemType(item: commonreferences.Reference): structure.ItemType;\n    findConcept(ref: commonreferences.Reference): structure.ConceptType;\n    findConceptScheme(ref: commonreferences.Reference): structure.ConceptSchemeType;\n    searchDataStructure(ref: commonreferences.Reference): Array<structure.DataStructure>;\n    searchDataflow(ref: commonreferences.Reference): Array<structure.Dataflow>;\n    searchCodelist(ref: commonreferences.Reference): Array<structure.CodelistType>;\n    searchItemType(item: commonreferences.Reference): Array<structure.ItemType>;\n    searchConcept(ref: commonreferences.Reference): Array<structure.ConceptType>;\n    searchConceptScheme(ref: commonreferences.Reference): Array<structure.ConceptSchemeType>;\n    save(): any;\n\n}\nexport interface Repository {\n    query(query: message.DataQuery): message.DataMessage;\n    query(flow: structure.Dataflow, query: string): message.DataMessage;\n}\nexport class SdmxIO {\n    public static LOCALE: string = \"en\";\n    public static SANITISE_NAMES: boolean = false;\n    public static PARSER:Array<parser.SdmxParserProvider> = [];\n    public static getLocale():string {\n        return SdmxIO.LOCALE;\n    }\n    public static isSanitiseNames():boolean {\n        return SdmxIO.SANITISE_NAMES;\n\n    }\n    public static parseStructure(s: string): message.StructureType {\n        alert(SdmxIO.PARSER.length);\n        for(var i=0;i<SdmxIO.PARSER.length;i++) {\n            if (SdmxIO.PARSER[i].canParse(s)){ return SdmxIO.PARSER[i].parseStructure(s);}\n            else {\n                alert(\"not my type\");\n                \n            }\n        }\n        return null;\n    }\n    public static registerParserProvider(p: parser.SdmxParserProvider){\n        SdmxIO.PARSER.push(p);\n        \n    }\n}\n"],"sourceRoot":"/source/"}