{"version":3,"sources":["sdmx.ts"],"names":["SdmxIO","SdmxIO.constructor","SdmxIO.getLocale","SdmxIO.isSanitiseNames","SdmxIO.parseStructure","SdmxIO.parseData","SdmxIO.registerParserProvider","SdmxIO.connect"],"mappings":";IAuBA;QAAAA;QAqCAC,CAACA;QAjCiBD,gBAASA,GAAvBA;YACIE,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA;QACzBA,CAACA;QACaF,sBAAeA,GAA7BA;YACIG,MAAMA,CAACA,MAAMA,CAACA,cAAcA,CAACA;QAEjCA,CAACA;QACaH,qBAAcA,GAA5BA,UAA6BA,CAASA;YAClCI,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAC5CA,EAAEA,CAACA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;oBAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA;gBAACA,CAACA;gBAChFA,IAAIA,CAACA,CAACA;oBACFA,KAAKA,CAACA,aAAaA,CAACA,CAACA;gBACzBA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACaJ,gBAASA,GAAvBA,UAAwBA,CAASA;YAC7BK,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAC5CA,EAAEA,CAACA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;oBAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA;gBAACA,CAACA;gBAC3EA,IAAIA,CAACA,CAACA;oBACFA,KAAKA,CAACA,aAAaA,CAACA,CAACA;gBACzBA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACaL,6BAAsBA,GAApCA,UAAqCA,CAAgCA;YACjEM,MAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QAE1BA,CAACA;QACaN,cAAOA,GAArBA,UAAsBA,CAASA;YAC3BO,EAAEA,CAACA,CAACA,CAACA,IAAIA,KAAKA,CAACA;gBAACA,MAAMA,CAACA,IAAIA,GAAGA,CAACA,GAAGA,CAACA,KAAKA,EAACA,4CAA4CA,EAACA,EAAEA,CAACA,CAACA;YAC1FA,EAAEA,CAACA,CAACA,CAACA,IAAIA,OAAOA,CAACA;gBAACA,MAAMA,CAACA,IAAIA,KAAKA,CAACA,wBAAwBA,CAACA,OAAOA,EAAEA,gCAAgCA,EAAEA,gDAAgDA,CAACA,CAACA;QAC7JA,CAACA;QAnCaP,aAAMA,GAAWA,IAAIA,CAACA;QACtBA,qBAAcA,GAAYA,KAAKA,CAACA;QAChCA,aAAMA,GAAyCA,EAAEA,CAACA;QAkCpEA,aAACA;IAADA,CArCA,AAqCCA,IAAA;IArCY,cAAM,SAqClB,CAAA;IACD,MAAM,CAAC,sBAAsB,CAAC,IAAI,MAAM,CAAC,qBAAqB,EAAE,CAAC,CAAC","file":"sdmx.js","sourcesContent":["/*\r\n    This file is part of sdmx-js.\r\n\r\n    sdmx-js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    sdmx-js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with sdmx-js.  If not, see <http://www.gnu.org/licenses/>.\r\n    Copyright (C) 2016 James Gardner\r\n*/\r\n/// <amd-module name='sdmx'/>\r\nimport message = require(\"sdmx/message\");\r\nimport interfaces = require(\"sdmx/interfaces\");\r\nimport sdmx20 = require(\"sdmx/sdmx20\");\r\nimport abs = require(\"sdmx/abs\");\r\nimport nomis = require(\"sdmx/nomis\");\r\nexport class SdmxIO {\r\n    public static LOCALE: string = \"en\";\r\n    public static SANITISE_NAMES: boolean = false;\r\n    public static PARSER: Array<interfaces.SdmxParserProvider> = [];\r\n    public static getLocale(): string {\r\n        return SdmxIO.LOCALE;\r\n    }\r\n    public static isSanitiseNames(): boolean {\r\n        return SdmxIO.SANITISE_NAMES;\r\n\r\n    }\r\n    public static parseStructure(s: string): message.StructureType {\r\n        for (var i = 0; i < SdmxIO.PARSER.length; i++) {\r\n            if (SdmxIO.PARSER[i].canParse(s)) { return SdmxIO.PARSER[i].parseStructure(s); }\r\n            else {\r\n                alert(\"not my type\");\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public static parseData(s: string): message.DataMessage {\r\n        for (var i = 0; i < SdmxIO.PARSER.length; i++) {\r\n            if (SdmxIO.PARSER[i].canParse(s)) { return SdmxIO.PARSER[i].parseData(s); }\r\n            else {\r\n                alert(\"not my type\");\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public static registerParserProvider(p: interfaces.SdmxParserProvider) {\r\n        SdmxIO.PARSER.push(p);\r\n\r\n    }\r\n    public static connect(s: string): interfaces.Queryable {\r\n        if (s == \"ABS\") return new abs.ABS(\"ABS\",\"http://stat.abs.gov.au/restsdmx/sdmx.ashx/\",\"\");\r\n        if (s == \"NOMIS\") return new nomis.NOMISRESTServiceRegistry(\"NOMIS\", \"https://www.nomisweb.co.uk/api\", \"uid=0xad235cca367972d98bd642ef04ea259da5de264f\");\r\n    }\r\n}\r\nSdmxIO.registerParserProvider(new sdmx20.Sdmx20StructureParser());"],"sourceRoot":"/source/"}