{"version":3,"sources":["sdmx.ts"],"names":["SdmxIO","SdmxIO.constructor","SdmxIO.getLocale","SdmxIO.isSanitiseNames","SdmxIO.parseStructure","SdmxIO.parseData","SdmxIO.registerParserProvider"],"mappings":";IAKA;QAAAA;QAiCAC,CAACA;QA7BiBD,gBAASA,GAAvBA;YACIE,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA;QACzBA,CAACA;QACaF,sBAAeA,GAA7BA;YACIG,MAAMA,CAACA,MAAMA,CAACA,cAAcA,CAACA;QAEjCA,CAACA;QACaH,qBAAcA,GAA5BA,UAA6BA,CAASA;YAClCI,GAAGA,CAAAA,CAACA,GAAGA,CAACA,CAACA,GAACA,CAACA,EAACA,CAACA,GAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,EAACA,CAACA,EAAEA,EAAEA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,CAAAA,CAACA;oBAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA;gBAAAA,CAACA;gBAC9EA,IAAIA,CAACA,CAACA;oBACFA,KAAKA,CAACA,aAAaA,CAACA,CAACA;gBACzBA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACaJ,gBAASA,GAAvBA,UAAwBA,CAASA;YAC7BK,GAAGA,CAAAA,CAACA,GAAGA,CAACA,CAACA,GAACA,CAACA,EAACA,CAACA,GAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,EAACA,CAACA,EAAEA,EAAEA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;oBAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA;gBAAAA,CAACA;gBAC1EA,IAAIA,CAACA,CAACA;oBACFA,KAAKA,CAACA,aAAaA,CAACA,CAACA;gBACzBA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACaL,6BAAsBA,GAApCA,UAAqCA,CAAgCA;YACjEM,MAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QAE1BA,CAACA;QA/BaN,aAAMA,GAAWA,IAAIA,CAACA;QACtBA,qBAAcA,GAAYA,KAAKA,CAACA;QAChCA,aAAMA,GAAwCA,EAAEA,CAACA;QA8BnEA,aAACA;IAADA,CAjCA,AAiCCA,IAAA;IAjCY,cAAM,SAiClB,CAAA;IACD,MAAM,CAAC,sBAAsB,CAAC,IAAI,MAAM,CAAC,qBAAqB,EAAE,CAAC,CAAC","file":"sdmx.js","sourcesContent":["/// <amd-module name='sdmx'/>\r\nimport message = require(\"sdmx/message\");\r\nimport interfaces = require(\"sdmx/interfaces\");\r\nimport sdmx20 = require(\"sdmx/sdmx20\");\r\n\r\nexport class SdmxIO {\r\n    public static LOCALE: string = \"en\";\r\n    public static SANITISE_NAMES: boolean = false;\r\n    public static PARSER:Array<interfaces.SdmxParserProvider> = [];\r\n    public static getLocale():string {\r\n        return SdmxIO.LOCALE;\r\n    }\r\n    public static isSanitiseNames():boolean {\r\n        return SdmxIO.SANITISE_NAMES;\r\n\r\n    }\r\n    public static parseStructure(s: string): message.StructureType {\r\n        for(var i=0;i<SdmxIO.PARSER.length;i++) {\r\n            if (SdmxIO.PARSER[i].canParse(s)){ return SdmxIO.PARSER[i].parseStructure(s);}\r\n            else {\r\n                alert(\"not my type\");\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public static parseData(s: string): message.DataMessage {\r\n        for(var i=0;i<SdmxIO.PARSER.length;i++) {\r\n            if (SdmxIO.PARSER[i].canParse(s)) { return SdmxIO.PARSER[i].parseData(s);}\r\n            else {\r\n                alert(\"not my type\");\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public static registerParserProvider(p: interfaces.SdmxParserProvider){\r\n        SdmxIO.PARSER.push(p);\r\n        \r\n    }\r\n}\r\nSdmxIO.registerParserProvider(new sdmx20.Sdmx20StructureParser());"],"sourceRoot":"/source/"}