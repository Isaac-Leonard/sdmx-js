{"version":3,"sources":["sdmx.ts"],"names":["SdmxIO","SdmxIO.constructor","SdmxIO.getLocale","SdmxIO.isSanitiseNames","SdmxIO.parseStructure"],"mappings":";IAiCA;QAAAA;QAcAC,CAACA;QAXiBD,gBAASA,GAAvBA;YACIE,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA;QACzBA,CAACA;QACaF,sBAAeA,GAA7BA;YACIG,MAAMA,CAACA,MAAMA,CAACA,cAAcA,CAACA;QAEjCA,CAACA;QACaH,qBAAcA,GAA5BA,UAA6BA,CAASA;YAClCI,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QAXaJ,aAAMA,GAAWA,IAAIA,CAACA;QACtBA,qBAAcA,GAAYA,KAAKA,CAACA;QAYlDA,aAACA;IAADA,CAdA,AAcCA,IAAA;IAdY,cAAM,SAclB,CAAA","file":"sdmx.js","sourcesContent":["import message = require(\"message\");\nimport commonreferences = require(\"commonreferences\");\nimport structure = require(\"structure\");\ninterface Queryable {\n    getRegistry(): Registry;\n    getRepository(): Repository;\n}\nexport interface Registry {\n    // Registry\n    listDataflows(): Array<structure.Dataflow>;\n    clear(): void;\n    load(struct: message.StructureType): void;\n    unload(struct: message.StructureType): void;\n    findDataStructure(ref: commonreferences.Reference): structure.DataStructure;\n    findDataflow(ref: commonreferences.Reference): structure.Dataflow;\n    findCode(ref: commonreferences.Reference): structure.CodeType;\n    findCodelist(ref: commonreferences.Reference): structure.CodelistType;\n    findItemType(item: commonreferences.Reference): structure.ItemType;\n    findConcept(ref: commonreferences.Reference): structure.ConceptType;\n    findConceptScheme(ref: commonreferences.Reference): structure.ConceptSchemeType;\n    searchDataStructure(ref: commonreferences.Reference): Array<structure.DataStructure>;\n    searchDataflow(ref: commonreferences.Reference): Array<structure.Dataflow>;\n    searchCodelist(ref: commonreferences.Reference): Array<structure.CodelistType>;\n    searchItemType(item: commonreferences.Reference): Array<structure.ItemType>;\n    searchConcept(ref: commonreferences.Reference): Array<structure.ConceptType>;\n    searchConceptScheme(ref: commonreferences.Reference): Array<structure.ConceptSchemeType>;\n    save(): any;\n\n}\nexport interface Repository {\n    query(query: message.DataQuery): message.DataMessageType;\n    query(flow: structure.Dataflow, query: string): message.DataMessageType;\n}\nexport class SdmxIO {\n    public static LOCALE: string = \"en\";\n    public static SANITISE_NAMES: boolean = false;\n    public static getLocale():string {\n        return SdmxIO.LOCALE;\n    }\n    public static isSanitiseNames():boolean {\n        return SdmxIO.SANITISE_NAMES;\n\n    }\n    public static parseStructure(s: String): message.StructureType {\n        return null;\n    }\n\n}"],"sourceRoot":"/source/"}