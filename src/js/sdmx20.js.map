{"version":3,"sources":["sdmx20.ts"],"names":["Sdmx20StructureParser","Sdmx20StructureParser.constructor","Sdmx20StructureParser.getVersionIdentifier","Sdmx20StructureParser.canParse","Sdmx20StructureParser.isStructure","Sdmx20StructureParser.isData","Sdmx20StructureParser.isMetadata","Sdmx20StructureParser.parseStructure","Sdmx20StructureParser.parseData","Sdmx20StructureReaderTools","Sdmx20StructureReaderTools.constructor","Sdmx20StructureReaderTools.toStructureType","Sdmx20StructureReaderTools.toHeader","Sdmx20StructureReaderTools.toCodelists","Sdmx20StructureReaderTools.toConcepts","Sdmx20StructureReaderTools.toKeyFamilies","Sdmx20StructureReaderTools.getStructureType","Sdmx20StructureReaderTools.myLoop","Sdmx20StructureReaderTools.findNodeName"],"mappings":"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AEA,CAACA,CAACA,CAACA,CAACA,QAAQA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAClBA,EAAEA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,CAACA,CAACA,IAAIA,SAASA,CAACA,CAACA,CAACA;wBAC/BA,GAAGA,IAAIA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBAC1BA,CAACA;gBACLA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACJA,GAAGA,IAAIA,CAACA,CAACA,SAASA,GAAGA,MAAMA,CAACA;gBAChCA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,GAAGA,CAACA;QACfA,CAACA;QACDR,iDAAYA,GAAZA,UAAaA,CAAQA,EAACA,UAAcA;YAChCS,GAAGA,CAAAA,CAACA,GAAGA,CAACA,CAACA,GAAQA,CAACA,EAACA,CAACA,GAACA,UAAUA,CAACA,MAAMA,EAACA,CAACA,EAAEA,EAAEA,CAACA;gBACzCA,IAAIA,EAAEA,GAAUA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA;gBACvCA,EAAEA,CAACA,CAACA,EAAEA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAEA,CAACA,CAACA,CAACA;oBAAAA,MAAMA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA;YAC/CA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QAELT,iCAACA;IAADA,CA3DA,AA2DCA,IAAA;IA3DY,kCAA0B,6BA2DtC,CAAA;IAKD,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,qBAAqB,EAAE,CAAC,CAAC","file":"sdmx20.js","sourcesContent":["/// <amd-module name='sdmx20'/>\n///<reference path=\"sax.d.ts\"/>\nimport sax = require(\"sax\");\nimport structure = require(\"structure\");\nimport message = require(\"message\");\nimport parser = require(\"parser\");\nimport sdmx = require(\"sdmx\");\nimport parseXml = require(\"parseXml\");\nexport class Sdmx20StructureParser implements parser.SdmxParserProvider {\n    constructor() {\n\n    }\n    getVersionIdentifier(): number {\n        return 2.1;\n    }\n    canParse(input: string): boolean {\n        if (input == null) return false;\n        if (this.isStructure(input)) return true;\n        if (this.isData(input)) return true;\n    }\n    isStructure(input: string): boolean {\n        if (input.indexOf(\"Structure\") != -1 && input.indexOf(\"http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message\") != -1) {\n            return true;\n        } else return false;\n    }\n    isData(header: string): boolean {\n        return false;\n    }\n    isMetadata(header: string): boolean {\n        return false;\n    }\n    parseStructure(input: string): message.StructureType {\n        var srt: Sdmx20StructureReaderTools = new Sdmx20StructureReaderTools(input);\n        return srt.getStructureType();\n\n    }\n    parseData(input: string): message.DataMessage {\n        var opts: sax.SAXOptions = <sax.SAXOptions>{};\n        var parser: sax.SAXParser = sax.parser(/*strict=*/true,/*SaxOptions*/opts);\n\n        parser.onerror = function(e) {\n            // an error happened.\n        };\n        parser.ontext = function(t) {\n            // got some text.  t is the string of text.\n        };\n        parser.onopentag = function(node) {\n            // opened a tag.  node has \"name\" and \"attributes\"\n            console.log(\"open:\" + node);\n        };\n        parser.onclosetag = function(e) {\n            console.log(\"close:\" + e);\n\n        }\n        parser.onattribute = function(attr) {\n            // an attribute.  attr has \"name\" and \"value\"\n        };\n        parser.onend = function() {\n            // parser stream is done, and ready to have more stuff written to it.\n        };\n\n        parser.write(input).close();\n        return null;\n    }\n}\nexport class Sdmx20StructureReaderTools {\n    private struct: message.StructureType = null;\n\n    constructor(s: string) {\n        var dom: any = parseXml.parseXml(s);\n        this.struct=this.toStructureType(dom.documentElement);\n    }\n    toStructureType(structure:any):message.StructureType {\n        this.struct = new message.StructureType();\n        var childNodes = structure.childNodes;\n        for(var i:number=0;i<childNodes.length;i++) {\n            alert(childNodes[i].nodeName);\n        }\n        this.toHeader(this.findNodeName(\"Header\",childNodes));\n        this.toCodelists(this.findNodeName(\"Codelists\",childNodes));\n        this.toConcepts(this.findNodeName(\"Concepts\",childNodes));\n        this.toKeyFamilies(this.findNodeName(\"KeyFamilies\",childNodes));\n        return this.struct;\n    }\n    toHeader(headerNode:any) {\n        return null;\n    }\n    toCodelists(codelistsNode:any) {\n        return null;\n    }\n    toConcepts(conceptsNode:any) {\n        return null;\n    }\n    toKeyFamilies(keyFamiliesNode:any){\n        return null;\n    }\n    getStructureType(): message.StructureType {\n        return this.struct;\n    }\n    myLoop(x: any): string {\n        var i: number, y: any, xLen: number, txt: string;\n        txt = \"\";\n        x = x.childNodes;\n        xLen = x.length;\n        for (i = 0; i < xLen; i++) {\n            y = x[i];\n            if (y.nodeType != 3) {\n                if (y.childNodes[0] != undefined) {\n                    txt += this.myLoop(y);\n                }\n            } else {\n                txt += y.nodeValue + \"<br>\";\n            }\n        }\n        return txt;\n    }\n    findNodeName(s:string,childNodes:any) {\n        for(var i:number=0;i<childNodes.length;i++) {\n            var nn:string = childNodes[i].nodeName;\n            if (nn.indexOf(s)!=-1)return childNodes[i];\n        }\n        return null;\n    }\n\n}\n\n\n\n\nsdmx.SdmxIO.registerParserProvider(new Sdmx20StructureParser());"],"sourceRoot":"/source/"}