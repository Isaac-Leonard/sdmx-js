{"version":3,"sources":["xml/DateTime.ts"],"names":["xml","xml.DateTime","xml.DateTime.constructor","xml.DateTime.getDate","xml.DateTime.fromString","xml.DateTime.toString","xml.DateTime.now","xml.DateTime.setBaseString","xml.DateTime.getBaseString"],"mappings":"AAAA,uCAAuC;AACvC,IAAO,GAAG,CAuCT;AAvCD,WAAO,GAAG,EAAC,CAAC;IACRA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,QAAQA,CAACA,CAACA;IAC/BA;QAMIC,kBAAYA,CAAOA;YAHXC,eAAUA,GAAWA,IAAIA,CAACA;YAC1BA,SAAIA,GAASA,IAAIA,CAACA;YAGtBA,IAAIA,CAACA,IAAIA,GAAGA,CAACA,CAACA;QAClBA,CAACA;QAEMD,0BAAOA,GAAdA;YACIE,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA;QACrBA,CAACA;QAEaF,mBAAUA,GAAxBA,UAAyBA,CAASA;YAC9BG,EAAEA,CAACA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA;gBACvBA,MAAMA,CAACA,IAAIA,CAACA;YAChBA,CAACA;YACDA,IAAIA,CAACA,GAAGA,IAAIA,MAAMA,CAACA,CAACA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA;YACnDA,IAAIA,EAAEA,GAAYA,IAAIA,QAAQA,CAACA,CAACA,CAACA,MAAMA,EAAEA,CAACA,CAACA;YAC3CA,EAAEA,CAACA,aAAaA,CAACA,CAACA,CAACA,CAACA;YACpBA,MAAMA,CAACA,EAAEA,CAACA;QACdA,CAACA;QACMH,2BAAQA,GAAfA;YACII,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,IAAIA,IAAIA,CAACA;gBAACA,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA;YACpDA,MAAMA,CAACA,IAAIA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,MAAMA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;QACrDA,CAACA;QACaJ,YAAGA,GAAjBA;YACIK,MAAMA,CAACA,IAAIA,QAAQA,CAACA,IAAIA,MAAMA,EAAEA,CAACA,MAAMA,EAAEA,CAACA,CAACA;QAC/CA,CAACA;QACML,gCAAaA,GAApBA,UAAqBA,CAASA;YAC1BM,IAAIA,CAACA,UAAUA,GAAGA,CAACA,CAACA;QACxBA,CAACA;QACMN,gCAAaA,GAApBA;YACIO,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA;QAC3BA,CAACA;QAlCaP,WAAEA,GAAWA,0BAA0BA,CAACA;QACxCA,YAAGA,GAAWA,uBAAuBA,CAACA;QAkCxDA,eAACA;IAADA,CApCAD,AAoCCC,IAAAD;IApCYA,YAAQA,WAoCpBA,CAAAA;AACLA,CAACA,EAvCM,GAAG,KAAH,GAAG,QAuCT","file":"xml/DateTime.js","sourcesContent":["/// <reference path=\"../moment.d.ts\" />\nmodule xml {\n    var moment = require('moment');\n    export class DateTime {\n        public static DF: String = \"yyyy-MM-dd'T'HH:mm:ssXXX\";\n        public static DF2: String = \"yyyy-MM-dd'T'HH:mm:ss\";\n        private baseString: String = null;\n        private date: Date = null;\n\n        constructor(d: Date) {\n            this.date = d;\n        }\n\n        public getDate(): Date {\n            return this.date;\n        }\n\n        public static fromString(s: String): DateTime {\n            if (s == null || s == \"\") {\n                return null;\n            }\n            var m = new moment(s, [DateTime.DF, DateTime.DF2]);\n            var dt:DateTime = new DateTime(m.toDate());\n            dt.setBaseString(s);\n            return dt;\n        }\n        public toString(): String {\n            if (this.baseString != null) return this.baseString;\n            return new moment(this.date).format(DateTime.DF);\n        }\n        public static now(): DateTime {\n            return new DateTime(new moment().toDate());\n        }\n        public setBaseString(s: String) {\n            this.baseString = s;\n        }\n        public getBaseString() {\n            return this.baseString;\n        }\n    }\n}\n"],"sourceRoot":"/source/"}