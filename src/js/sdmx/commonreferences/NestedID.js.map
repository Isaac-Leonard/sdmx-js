{"version":3,"sources":["sdmx/commonreferences/NestedID.ts"],"names":["sdmx","sdmx.commonreferences","sdmx.commonreferences.NestedID","sdmx.commonreferences.NestedID.constructor","sdmx.commonreferences.NestedID.getPatternArray","sdmx.commonreferences.NestedID.equalsNestedID","sdmx.commonreferences.NestedID.equalsString","sdmx.commonreferences.NestedID.equalsID","sdmx.commonreferences.NestedID.asID"],"mappings":";;;;;AAAA,oDAAoD;AACpD,sDAAsD;AACtD,IAAO,IAAI,CA8BV;AA9BD,WAAO,IAAI;IAACA,IAAAA,gBAAgBA,CA8B3BA;IA9BWA,WAAAA,gBAAgBA,EAACA,CAACA;QAC1BC;YAA8BC,4BAAkBA;YAI5CA,kBAAYA,CAASA;gBACjBC,kBAAMA,CAACA,CAACA,CAACA;YACbA,CAACA;YAEMD,kCAAeA,GAAtBA;gBACIE,MAAMA,CAACA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA;YAC9BA,CAACA;YAEMF,iCAAcA,GAArBA,UAAsBA,EAAYA;gBAC9BG,EAAEA,CAACA,CAACA,gBAAKA,CAACA,SAASA,WAAEA,IAAIA,IAAIA,CAACA;oBAACA,MAAMA,CAACA,KAAKA,CAACA;gBAC5CA,MAAMA,CAACA,gBAAKA,CAACA,SAASA,WAAEA,IAAIA,EAAEA,CAACA,SAASA,EAAEA,CAACA;YAC/CA,CAACA;YAEMH,+BAAYA,GAAnBA,UAAoBA,EAAUA;gBAC1BI,MAAMA,CAACA,gBAAKA,CAACA,YAAYA,YAACA,EAAEA,CAACA,CAACA;YAClCA,CAACA;YAEMJ,2BAAQA,GAAfA,UAAgBA,EAAUA;gBACtBK,MAAMA,CAACA,gBAAKA,CAACA,SAASA,WAAEA,IAAIA,EAAEA,CAACA,SAASA,EAAEA,CAACA;YAC/CA,CAACA;YAEML,uBAAIA,GAAXA;gBACIM,MAAMA,CAACA,IAAIA,uBAAMA,CAACA,gBAAKA,CAACA,SAASA,WAAEA,CAACA,CAACA;YACzCA,CAACA;YAzBaN,gBAAOA,GAAWA,sCAAsCA,CAACA;YA0B3EA,eAACA;QAADA,CA5BAD,AA4BCC,EA5B6BD,GAAGA,CAACA,cAAcA,EA4B/CA;QA5BYA,yBAAQA,WA4BpBA,CAAAA;IACLA,CAACA,EA9BWD,gBAAgBA,GAAhBA,qBAAgBA,KAAhBA,qBAAgBA,QA8B3BA;AAADA,CAACA,EA9BM,IAAI,KAAJ,IAAI,QA8BV","file":"sdmx/commonreferences/NestedID.js","sourcesContent":["/// <reference path=\"../../xml/RegexXMLString.ts\" />\n/// <reference path=\"../commonreferences/IDType.ts\" />\nmodule sdmx.commonreferences {\n    export class NestedID extends xml.RegexXMLString {\n\n        public static PATTERN: String = \"[A-z0-9_@$\\\\-]+(\\\\.[A-z0-9_@$\\\\-]+)*\";\n\n        constructor(s: String) {\n            super(s);\n        }\n\n        public getPatternArray(): String[] {\n            return [NestedID.PATTERN];\n        }\n\n        public equalsNestedID(id: NestedID): boolean {\n            if (super.getString() == null) return false;\n            return super.getString() == id.getString();\n        }\n\n        public equalsString(id: String): boolean {\n            return super.equalsString(id);\n        }\n\n        public equalsID(id: IDType): boolean {\n            return super.getString() == id.getString();\n        }\n\n        public asID(): IDType {\n            return new IDType(super.getString());\n        }\n    }\n}"],"sourceRoot":"/source/"}