{"version":3,"sources":["sdmx/commonreferences/Version.ts"],"names":["sdmx","sdmx.commonreferences","sdmx.commonreferences.Version","sdmx.commonreferences.Version.constructor","sdmx.commonreferences.Version.getPatternArray","sdmx.commonreferences.Version.equalsVersion","sdmx.commonreferences.Version.equals","sdmx.commonreferences.Version.compareTo"],"mappings":";;;;;AAAA,oDAAoD;AACpD,IAAO,IAAI,CAwBV;AAxBD,WAAO,IAAI;IAACA,IAAAA,gBAAgBA,CAwB3BA;IAxBWA,WAAAA,gBAAgBA,EAACA,CAACA;QAC1BC;YAA6BC,2BAAkBA;YAG3CA,iBAAYA,CAASA;gBACjBC,kBAAMA,CAACA,CAACA,CAACA;YACbA,CAACA;YACMD,iCAAeA,GAAtBA;gBACIE,MAAMA,CAACA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;YAC7BA,CAACA;YACMF,+BAAaA,GAApBA,UAAqBA,EAAWA;gBAC5BG,MAAMA,CAACA,gBAAKA,CAACA,SAASA,WAAEA,IAAIA,EAAEA,CAACA,SAASA,EAAEA,CAACA;YAC/CA,CAACA;YACMH,wBAAMA,GAAbA,UAAcA,EAAUA;gBACpBI,MAAMA,CAACA,gBAAKA,CAACA,SAASA,WAAEA,IAAIA,EAAEA,CAACA;YACnCA,CAACA;YACMJ,2BAASA,GAAhBA,UAAiBA,CAASA;gBACtBK,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,YAAYA,OAAOA,CAACA,CAACA;oBAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gBACvCA,IAAIA,EAAEA,GAAWA,UAAUA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA,CAACA;gBAC1CA,IAAIA,EAAEA,GAAWA,UAAUA,CAACA,QAAQA,EAAEA,CAACA,CAACA;gBACxCA,MAAMA,CAACA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA;YAC1CA,CAACA;YAnBaL,eAAOA,GAAWA,oBAAoBA,CAACA;YACvCA,WAAGA,GAAYA,IAAIA,OAAOA,CAACA,KAAKA,CAACA,CAACA;YAmBpDA,cAACA;QAADA,CArBAD,AAqBCC,EArB4BD,GAAGA,CAACA,cAAcA,EAqB9CA;QArBYA,wBAAOA,UAqBnBA,CAAAA;IAELA,CAACA,EAxBWD,gBAAgBA,GAAhBA,qBAAgBA,KAAhBA,qBAAgBA,QAwB3BA;AAADA,CAACA,EAxBM,IAAI,KAAJ,IAAI,QAwBV","file":"sdmx/commonreferences/Version.js","sourcesContent":["/// <reference path=\"../../xml/RegexXMLString.ts\" />\nmodule sdmx.commonreferences {\n    export class Version extends xml.RegexXMLString {\n        public static PATTERN: String = \"[0-9]+(\\\\.[0-9]+)*\";\n        public static ONE: Version = new Version(\"1.0\");\n        constructor(s: String) {\n            super(s);\n        }\n        public getPatternArray(): String[] {\n            return [Version.PATTERN];\n        }\n        public equalsVersion(id: Version): boolean {\n            return super.getString() == id.getString();\n        }\n        public equals(id: String): boolean {\n            return super.getString() == id;\n        }\n        public compareTo(o: Object): number {\n            if (!(o instanceof Version)) return -1;\n            var a1: number = parseFloat(o.toString());\n            var a2: number = parseFloat(toString());\n            return a1 > a2 ? 1 : a1 < a2 ? -1 : 0;\n        }\n    }\n\n}"],"sourceRoot":"/source/"}