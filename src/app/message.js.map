{"version":3,"sources":["message.ts"],"names":["DataMessage","DataMessage.constructor","DataQuery","DataQuery.constructor","StructureType","StructureType.constructor","StructureType.listDataflows","StructureType.clear","StructureType.load","StructureType.unload","StructureType.findDataStructure","StructureType.findDataflow","StructureType.findCode","StructureType.findCodelist","StructureType.findItemType","StructureType.findConcept","StructureType.findConceptScheme","StructureType.searchDataStructure","StructureType.searchDataflow","StructureType.searchCodelist","StructureType.searchItemType","StructureType.searchConcept","StructureType.searchConceptScheme","StructureType.save"],"mappings":";IAIA;QAAAA;QAEAC,CAACA;QAADD,kBAACA;IAADA,CAFA,AAECA,IAAA;IAFY,mBAAW,cAEvB,CAAA;IAED;QAAAE;QAEAC,CAACA;QAADD,gBAACA;IAADA,CAFA,AAECA,IAAA;IAFY,iBAAS,YAErB,CAAA;IACD;QAEIE,uBAAYA,MAAWA;YACnBC,IAAIA,CAACA,MAAMA,GAAGA,MAAMA,CAACA;QACzBA,CAACA;QACDD,WAAWA;QACXA,qCAAaA,GAAbA;YACIE,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACDF,6BAAKA,GAALA;QAEAG,CAACA;QACDH,4BAAIA,GAAJA,UAAKA,MAAqBA;QAE1BI,CAACA;QACDJ,8BAAMA,GAANA,UAAOA,MAAqBA;QAE5BK,CAACA;QACDL,yCAAiBA,GAAjBA,UAAkBA,GAA+BA;YAC7CM,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACDN,oCAAYA,GAAZA,UAAaA,GAA+BA;YACxCO,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACDP,gCAAQA,GAARA,UAASA,GAA+BA;YACpCQ,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACDR,oCAAYA,GAAZA,UAAaA,GAA+BA;YACxCS,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACDT,oCAAYA,GAAZA,UAAaA,IAAgCA;YACzCU,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACDV,mCAAWA,GAAXA,UAAYA,GAA+BA;YACvCW,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACDX,yCAAiBA,GAAjBA,UAAkBA,GAA+BA;YAC7CY,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACDZ,2CAAmBA,GAAnBA,UAAoBA,GAA+BA;YAC/Ca,MAAMA,CAACA,IAAIA,KAAKA,EAAsBA,CAACA;QAC3CA,CAACA;QACDb,sCAAcA,GAAdA,UAAeA,GAA+BA;YAC1Cc,MAAMA,CAACA,IAAIA,KAAKA,EAAsBA,CAACA;QAC3CA,CAACA;QACDd,sCAAcA,GAAdA,UAAeA,GAA+BA;YAC1Ce,MAAMA,CAACA,IAAIA,KAAKA,EAA0BA,CAACA;QAC/CA,CAACA;QACDf,sCAAcA,GAAdA,UAAeA,IAAgCA;YAC3CgB,MAAMA,CAACA,IAAIA,KAAKA,EAAsBA,CAACA;QAC3CA,CAACA;QACDhB,qCAAaA,GAAbA,UAAcA,GAA+BA;YACzCiB,MAAMA,CAACA,IAAIA,KAAKA,EAAyBA,CAACA;QAC9CA,CAACA;QACDjB,2CAAmBA,GAAnBA,UAAoBA,GAA+BA;YAC/CkB,MAAMA,CAACA,IAAIA,KAAKA,EAA+BA,CAACA;QACpDA,CAACA;QACDlB,4BAAIA,GAAJA;QAEAmB,CAACA;QAELnB,oBAACA;IAADA,CA7DA,AA6DCA,IAAA;IA7DY,qBAAa,gBA6DzB,CAAA","file":"C:/Users/James/Dropbox/sdmx-js/src/app/message.js","sourcesContent":["/// <amd-module name='message'/>\nimport sdmx = require(\"sdmx\");\nimport structure = require(\"structure\");\nimport commonreferences = require(\"commonreferences\");\nexport class DataMessage {\n\n}\n\nexport class DataQuery {\n\n}\nexport class StructureType implements sdmx.Registry {\n    public struct: any;\n    constructor(struct: any) {\n        this.struct = struct;\n    }\n    // Registry\n    listDataflows(): Array<structure.Dataflow> {\n        return null;\n    }\n    clear(): void {\n\n    }\n    load(struct: StructureType): void {\n\n    }\n    unload(struct: StructureType): void {\n\n    }\n    findDataStructure(ref: commonreferences.Reference): structure.DataStructure {\n        return null;\n    }\n    findDataflow(ref: commonreferences.Reference): structure.Dataflow {\n        return null;\n    }\n    findCode(ref: commonreferences.Reference): structure.CodeType {\n        return null;\n    }\n    findCodelist(ref: commonreferences.Reference): structure.CodelistType {\n        return null;\n    }\n    findItemType(item: commonreferences.Reference): structure.ItemType {\n        return null;\n    }\n    findConcept(ref: commonreferences.Reference): structure.ConceptType {\n        return null;\n    }\n    findConceptScheme(ref: commonreferences.Reference): structure.ConceptSchemeType {\n        return null;\n    }\n    searchDataStructure(ref: commonreferences.Reference): Array<structure.DataStructure> {\n        return new Array<structure.ItemType>();\n    }\n    searchDataflow(ref: commonreferences.Reference): Array<structure.Dataflow> {\n        return new Array<structure.Dataflow>();\n    }\n    searchCodelist(ref: commonreferences.Reference): Array<structure.CodelistType> {\n        return new Array<structure.CodelistType>();\n    }\n    searchItemType(item: commonreferences.Reference): Array<structure.ItemType> {\n        return new Array<structure.ItemType>();\n    }\n    searchConcept(ref: commonreferences.Reference): Array<structure.ConceptType> {\n        return new Array<structure.ConceptType>();\n    }\n    searchConceptScheme(ref: commonreferences.Reference): Array<structure.ConceptSchemeType> {\n        return new Array<structure.ConceptSchemeType>();\n    }\n    save(): any {\n\n    }\n\n}"],"sourceRoot":"/source/"}