{"version":3,"sources":["sdmx/data.ts"],"names":["Query","Query.constructor","Query.getQueryKey","Query.getKeyNames","Query.getDataflow","Query.getRegistry","Query.getStartDate","Query.getEndDate","Query.setStartDate","Query.setEndDate","Query.getQueryString","Query.getUpdatedAfter","Query.setUpdatedAfter","Query.getFirstNObservations","Query.setFirstNObservations","Query.getLastNObservations","Query.setLastNObservations","Query.getDimensionAtObservation","Query.setDimensionAtObservation","Query.setDetail","Query.getDetail","Query.getIncludeHistory","Query.setIncludeHistory","Query.setProviderRef","Query.getProviderRef","QueryKey","QueryKey.constructor","QueryKey.getName","QueryKey.getValues","QueryKey.setName","QueryKey.setValue","QueryKey.addValue","QueryKey.removeValue","QueryKey.getItemScheme","QueryKey.possibleValues","QueryKey.getQueryString","FlatObs","FlatObs.constructor","FlatObs.setValue","FlatObs.getValue","FlatObs.dump","FlatObs.size","AttachmentLevel","AttachmentLevel.constructor","AttachmentLevel.getName","AttachmentLevel.getId","AttachmentLevel.fromString","AttachmentLevel.fromId","AbstractKey","AbstractKey.constructor","AbstractKey.getComponent","PartialKey","PartialKey.constructor","FullKey","FullKey.constructor","Cube","Cube.constructor","Cube.putObservation","Group","Group.constructor","Group.Group","Group.putGroupValue","Group.getGroupValue","Group.processGroupValues","Group.getGroupKey","Group.matches","Group.getGroupAttributes","Group.getGroupName","Group.setGroupName","Group.setGroupValue","FlatColumnMapper","FlatColumnMapper.constructor","FlatColumnMapper.registerColumn","FlatColumnMapper.getColumnIndex","FlatColumnMapper.getColumnName","FlatColumnMapper.size","FlatColumnMapper.containsColumn","FlatColumnMapper.getAllColumns","FlatColumnMapper.getObservationColumns","FlatColumnMapper.getSeriesColumns","FlatColumnMapper.getDataSetColumns","FlatColumnMapper.getGroupColumns","FlatColumnMapper.isAttachedToDataSetString","FlatColumnMapper.isAttachedToDataSetInt","FlatColumnMapper.isAttachedToSeriesString","FlatColumnMapper.isAttachedToSeriesInt","FlatColumnMapper.isAttachedToObservationString","FlatColumnMapper.isAttachedToObservationInt","FlatColumnMapper.isAttachedToGroupString","FlatColumnMapper.isAttachedToGroupInt","FlatColumnMapper.dump","FlatDataSet","FlatDataSet.constructor","FlatDataSet.FlatDataSet","FlatDataSet.getColumnIndex","FlatDataSet.getValue","FlatDataSet.setValueStringCol","FlatDataSet.setValue","FlatDataSet.addObservation","FlatDataSet.removeObservation","FlatDataSet.getObservations","FlatDataSet.size","FlatDataSet.getColumnMapper","FlatDataSet.dump","FlatDataSet.getFlatObs","FlatDataSet.registerColumn","FlatDataSet.getColumnName","FlatDataSet.getColumnSize","FlatDataSet.getGroups","FlatDataSet.groupSize","FlatDataSet.applyGroupKey","FlatDataSet.setGroups","FlatDataSet.query","FlatDataSet.find","FlatDataSet.getDimensionAtObservation","FlatDataSet.setDimensionAtObservationString","FlatDataSet.getDimensionAtObservationString","FlatDataSetWriter","FlatDataSetWriter.constructor","FlatDataSetWriter.newDataSet","FlatDataSetWriter.newSeries","FlatDataSetWriter.newObservation","FlatDataSetWriter.writeDataSetComponent","FlatDataSetWriter.writeSeriesComponent","FlatDataSetWriter.writeObservationComponent","FlatDataSetWriter.finishSeries","FlatDataSetWriter.finishObservation","FlatDataSetWriter.finishDataSet","FlatDataSetWriter.getColumnMapper","FlatDataSetWriter.writeGroupValues","StructuredDataMessage","StructuredDataMessage.constructor","StructuredDataMessage.size","StructuredDataMessage.getStructuredDataSet","StructuredDataMessage.buildStructuredDataSet","StructuredDataMessage.getDataMessage","StructuredDataMessage.getRegistry","StructuredDataMessage.getDataflow","StructuredDataMessage.setDataflow","StructuredDataSet","StructuredDataSet.constructor","StructuredDataSet.getStructuredValue","StructuredDataSet.getColumnName","StructuredDataSet.size","StructuredDataSet.getColumnCount","StructuredDataSet.getDataSet","StructuredDataSet.getStructure","StructuredDataSet.getColumnIndexes","StructuredValue","StructuredValue.constructor","StructuredValue.getRepresentation","StructuredValue.getLocalRepresentation","StructuredValue.isCoded","StructuredValue.getCode","StructuredValue.getCodelist","StructuredValue.toString","StructuredValue.getConcept","StructuredValue.getValue","ValueTypeResolver","ValueTypeResolver.constructor","ValueTypeResolver.resolveCode","ValueTypeResolver.getPossibleCodes"],"mappings":"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ClDA,CAACA,IAAIA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gBACpBA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;oBAC/BA,CAACA,IAAIA,GAAGA,CAACA;gBACbA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,CAACA,CAACA;QACbA,CAACA;QACLV,eAACA;IAADA,CA/DA,AA+DCA,IAAA;IA/DY,gBAAQ,WA+DpB,CAAA;IAED;QAEIW,iBAAYA,IAAmBA;YADvBC,WAAMA,GAAkBA,EAAEA,CAACA;YAE/BA,IAAIA,CAACA,MAAMA,GAAGA,IAAIA,CAACA;YACnBA,EAAEA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA,CAACA,CAACA;gBACfA,IAAIA,CAACA,MAAMA,GAAGA,EAAEA,CAACA;YACrBA,CAACA;QACLA,CAACA;QACDD,0BAAQA,GAARA,UAASA,CAASA,EAAEA,CAASA;YACzBE,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAWA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,EAAEA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;oBACxDA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBAC3BA,CAACA;YACLA,CAACA;YACDA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;QACvBA,CAACA;QACDF,0BAAQA,GAARA,UAASA,CAASA;YACdG,EAAEA,CAACA,CAACA,CAACA,IAAIA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBAACA,MAAMA,CAACA,IAAIA,CAACA;YAACA,CAACA;YAC7CA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,C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","file":"sdmx/data.js","sourcesContent":["/*\n    This file is part of sdmx-js.\n\n    sdmx-js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    sdmx-js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with sdmx-js.  If not, see <http://www.gnu.org/licenses/>.\n    Copyright (C) 2016 James Gardner\n*/\n/// <amd-module name='sdmx/data'/>\n///<reference path=\"../collections.ts\"/>\nimport interfaces = require(\"sdmx/interfaces\");\nimport common = require(\"sdmx/common\");\nimport commonreferences = require(\"sdmx/commonreferences\");\nimport structure = require(\"sdmx/structure\");\nimport message = require(\"sdmx/message\");\nimport moment = require(\"moment\");\nimport sdmx = require(\"sdmx\");\nexport class Query {\n    private flow: structure.Dataflow = null;\n    private structRef: commonreferences.Reference = null;\n    private registry: interfaces.LocalRegistry = null;\n    private query: Array<QueryKey> = [];\n    private startDate: Date = new Date();\n    private endDate: Date = new Date();\n    private updatedAfter: Date = null;\n    private firstNObservations: number = null;\n    private lastNObservations: number = null;\n    private dimensionAtObservation: string = null;\n    private detail: string = null;\n    private includeHistory: boolean = null;\n    private providerRef: string = null;\n\n    constructor(flow: structure.Dataflow, registry: interfaces.LocalRegistry) {\n        this.flow = flow;\n        this.structRef = flow.getStructure();\n        this.registry = registry;\n        var kns = this.getKeyNames();\n        for (var i: number = 0; i < kns.length; i++) {\n            this.query.push(new QueryKey(this.structRef, registry, kns[i]));\n        }\n        this.startDate.setFullYear(2000);\n        this.endDate.setFullYear(2016);\n    }\n    public getQueryKey(id: string) {\n        for (var i: number = 0; i < this.query.length; i++) {\n            if (this.query[i].getName() == id) return this.query[i];\n        }\n        return null;\n    }\n    public getKeyNames(): Array<string> {\n        var struct: structure.DataStructure = this.registry.findDataStructure(this.structRef);\n        var keynames = [];\n        for (var i: number = 0; i < struct.getDataStructureComponents().getDimensionList().getDimensions().length; i++) {\n            var dim: structure.Dimension = struct.getDataStructureComponents().getDimensionList().getDimensions()[i];\n            keynames.push(dim.getId().toString());\n        }\n        if (struct.getDataStructureComponents().getDimensionList().getMeasureDimension() != null) {\n            var dim: structure.Dimension = struct.getDataStructureComponents().getDimensionList().getMeasureDimension();\n            keynames.push(dim.getId().toString());\n        }\n        return keynames;\n    }\n    getDataflow(): structure.Dataflow {\n        return this.flow;\n    }\n    getRegistry(): interfaces.LocalRegistry {\n        return this.registry;\n    }\n    getStartDate(): Date {\n        return this.startDate;\n    }\n    getEndDate(): Date {\n        return this.endDate;\n    }\n    setStartDate(d: Date) {\n        this.startDate = d;\n    }\n    setEndDate(d: Date) {\n        this.endDate = d;\n    }\n    getQueryString() {\n        var qString: string = \"\";\n        var keyNames = this.getKeyNames();\n        for (var i: number = 0; i < keyNames.length; i++) {\n            qString += this.getQueryKey(keyNames[i]).getQueryString();\n            if (i < (keyNames.length - 1)) {\n                qString += \".\";\n            }\n        }\n        return qString;\n    }\n    getUpdatedAfter(): Date { return this.updatedAfter; }\n    setUpdatedAfter(d: Date) { this.updatedAfter = d; }\n    getFirstNObservations(): number {\n        return this.firstNObservations;\n    }\n    setFirstNObservations(n: number) {\n        this.firstNObservations = n;\n    }\n    getLastNObservations(): number {\n        return this.lastNObservations;\n    }\n    setLastNObservations(n: number) {\n        this.lastNObservations = n;\n    }\n    getDimensionAtObservation(): string {\n        return this.dimensionAtObservation;\n    }\n    setDimensionAtObservation(s: string) {\n        this.dimensionAtObservation = s;\n    }\n    setDetail(s: string) { this.detail = s; }\n    getDetail(): string { return this.detail; }\n    getIncludeHistory(): boolean { return this.includeHistory; }\n    setIncludeHistory(b: boolean) { this.includeHistory = b; }\n    setProviderRef(s: string) { this.providerRef = s; }\n    getProviderRef(): string {\n        return this.providerRef;\n    }\n}\nexport class QueryKey {\n    private structRef: commonreferences.Reference = null;\n    private registry: interfaces.LocalRegistry = null;\n    private name: string = null;\n    private values: Array<string> = [];\n    constructor(structRef: commonreferences.Reference, registry: interfaces.LocalRegistry, s: string) {\n        this.structRef = structRef;\n        this.registry = registry;\n        this.name = s;\n    }\n    public getName(): string { return this.name; }\n    public getValues(): Array<string> {\n        return this.values;\n    }\n    public setName(s: string) { this.name = s; }\n    public setValue(a: Array<string>) {\n        this.values = a;\n    }\n    public addValue(s: string) {\n        for (var i: number = 0; i < this.values.length; i++) {\n            // already in here\n            if (this.values[i] == s) return;\n        }\n        this.values.push(s);\n    }\n    public removeValue(s: string) {\n        collections.arrays.remove(this.values, s);\n    }\n    public getItemScheme(): structure.ItemSchemeType {\n        var comp: structure.Component = this.registry.findDataStructure(this.structRef).findComponentString(this.name);\n        var lr = comp.getLocalRepresentation();\n        if (lr == null || lr.getEnumeration() == null) {\n            var conceptScheme: structure.ConceptSchemeType = this.registry.findConceptScheme(comp.getConceptIdentity());\n            return conceptScheme;\n        } else {\n            if (lr != null) {\n                var codelist = this.registry.findCodelist(lr.getEnumeration());\n                return codelist;\n            }\n            // lr == null\n            return null;\n        }\n        return null;\n    }\n    public possibleValues(): Array<string> {\n        var result = [];\n        var itemScheme: structure.ItemSchemeType = this.getItemScheme();\n        for (var i: number = 0; i < itemScheme.size(); i++) {\n            var itm: structure.ItemType = itemScheme.getItem(i);\n            result.push(itm.getId().toString());\n        }\n        return result;;\n    }\n    getQueryString() {\n        var s: string = \"\";\n        for (var i: number = 0; i < this.values.length; i++) {\n            s += this.values[i];\n            if (i < (this.values.length - 1)) {\n                s += \"+\";\n            }\n        }\n        return s;\n    }\n}\n\nexport class FlatObs {\n    private values: Array<string> = [];\n    constructor(vals: Array<string>) {\n        this.values = vals;\n        if (vals == null) {\n            this.values = [];\n        }\n    }\n    setValue(i: number, o: string) {\n        if (this.values.length <= i) {\n            for (var j: number = this.values.length; (j - 1) < i; j++) {\n                this.values.push(null);\n            }\n        }\n        this.values[i] = o;\n    }\n    getValue(i: number): string {\n        if (i >= this.values.length) { return null; }\n        return this.values[i];\n    }\n    dump() {\n        var s: string = \"\";\n        for (var i: number = 0; i < this.values.length; i++) {\n            s += this.values[i];\n            if (i < this.values.length) s += \" \";\n        }\n        console.log(s);\n    }\n    size(): number {\n        return this.values.length;\n    }\n\n}\n\n\nexport class AttachmentLevel {\n    private static LIST: Array<AttachmentLevel> = [];\n\n    public static ATTACHMENT_DATASET: number = 0;\n    public static ATTACHMENT_SERIES: number = 1;\n    public static ATTACHMENT_OBSERVATION: number = 2;\n    public static ATTACHMENT_GROUP: number = 3;\n    public static ATTACHMENT_DATASET_STRING: string = \"DataSet\";\n    public static ATTACHMENT_SERIES_STRING: string = \"Series\";\n    public static ATTACHMENT_OBSERVATION_STRING: string = \"Observation\";\n    public static ATTACHMENT_GROUP_STRING: string = \"Group\";\n    public static DATASET: AttachmentLevel = new AttachmentLevel(AttachmentLevel.ATTACHMENT_DATASET_STRING, AttachmentLevel.ATTACHMENT_DATASET);\n    public static SERIES: AttachmentLevel = new AttachmentLevel(AttachmentLevel.ATTACHMENT_SERIES_STRING, AttachmentLevel.ATTACHMENT_SERIES);\n    public static OBSERVATION: AttachmentLevel = new AttachmentLevel(AttachmentLevel.ATTACHMENT_OBSERVATION_STRING, AttachmentLevel.ATTACHMENT_OBSERVATION);\n    public static GROUP: AttachmentLevel = new AttachmentLevel(AttachmentLevel.ATTACHMENT_GROUP_STRING, AttachmentLevel.ATTACHMENT_GROUP);\n\n    private name: string = null;\n    private id: number = 0;\n\n\n\n    constructor(s: string, id: number) {\n        this.name = s;\n        this.id = id;\n        AttachmentLevel.LIST.push(this);\n    }\n    public getName(): string { return this.name; }\n    public getId(): number { return this.id; }\n    public static fromString(s: string): AttachmentLevel {\n        for (var i: number = 0; i < AttachmentLevel.LIST.length; i++) {\n            if (AttachmentLevel.LIST[i].getName() == s) return AttachmentLevel.LIST[i];\n        }\n        return null;\n    }\n    public static fromId(id: number): AttachmentLevel {\n        for (var i: number = 0; i < AttachmentLevel.LIST.length; i++) {\n            if (AttachmentLevel.LIST[i].getId() == id) return AttachmentLevel.LIST[i];\n        }\n        return null;\n    }\n\n\n}\nexport class AbstractKey {\n    getComponent(s: string): string {\n        return \"\";\n    }\n}\nexport class PartialKey extends AbstractKey {\n}\nexport class FullKey extends AbstractKey {\n}\nexport class Cube {\n    putObservation(order: Array<string>, mapper: interfaces.ColumnMapper, o: FlatObs) {\n\n    }\n}\n\nexport class Group {\n    private groupName: string = null;\n    private groupKey: collections.Dictionary<string, any> = new collections.Dictionary<string, any>();\n    private groupAttributes: collections.Dictionary<string, any> = new collections.Dictionary<string, any>();\n\n    private map: collections.Dictionary<string, any> = new collections.Dictionary<string, any>();\n\n    constructor() {\n\n    }\n\n    public static Group(groupValues: collections.Dictionary<string, any>): Group {\n        var g: Group = new Group();\n        g.map = groupValues;\n        return g;\n    }\n\n    putGroupValue(concept: string, value: any) {\n        this.map.setValue(concept, value);\n    }\n\n    getGroupValue(concept: string): any {\n        return this.groupAttributes.getValue(concept);\n    }\n\n    processGroupValues(ds: interfaces.DataSet) {\n        this.groupAttributes = new collections.Dictionary<string, any>();\n        var keys: Array<string> = this.map.keys();\n        for (var i = 0; i < keys.length; i++) {\n            var s: string = keys[i];\n            if (ds.getColumnMapper().getColumnIndex(s) == -1 || ds.getColumnMapper().isAttachedToGroupString(s)) {\n                this.groupAttributes.setValue(s, this.map.getValue(s));\n                if (!ds.getColumnMapper().isAttachedToGroupString(s)) {\n                    ds.getColumnMapper().registerColumn(s, AttachmentLevel.GROUP);\n                }\n            } else {\n                this.groupKey.setValue(s, this.map.getValue(s));\n                collections.arrays.remove(keys, s);\n            }\n        }\n        this.map = null;\n    }\n\n    getGroupKey(): collections.Dictionary<string, any> {\n        return this.groupKey;\n    }\n    public matches(key: FullKey): boolean {\n        var keys: Array<string> = this.getGroupKey().keys();\n        for (var i = 0; i < keys.length; i++) {\n            var s: string = keys[i];\n            var gv: any = this.getGroupKey().getValue(s);\n            if (gv != null) {\n                if (!(key.getComponent(s) == gv)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    getGroupAttributes(): collections.Dictionary<string, any> {\n        return this.groupAttributes;\n    }\n    getGroupName(): string {\n        return this.groupName;\n    }\n\n    setGroupName(groupName: string) {\n        this.groupName = groupName;\n    }\n\n    setGroupValue(columnName: string, val: string) {\n        this.groupAttributes.setValue(columnName, val);\n    }\n}\nexport class FlatColumnMapper implements interfaces.ColumnMapper {\n\n    private columns: Array<string> = [];\n    private groupColumns: Array<string> = [];\n\n    registerColumn(s: string, attach: AttachmentLevel): number {\n        if (collections.arrays.contains(this.columns, s) || collections.arrays.contains(this.groupColumns, s)) {\n            throw new Error(\"Attempt to Register already registered Column!!\");\n        }\n        if (attach == AttachmentLevel.GROUP) {\n            this.groupColumns.push(s);\n            this.columns.push(s);\n            return this.columns.indexOf(s);\n        } else {\n            this.columns.push(s);\n            return this.columns.indexOf(s);\n        }\n    }\n\n    getColumnIndex(s: string): number {\n        return this.columns.indexOf(s);\n    }\n\n    getColumnName(i: number): string {\n        return this.columns[i];\n    }\n\n    size(): number {\n        return this.columns.length;\n    }\n\n    containsColumn(name: string): boolean {\n        for (var i: number = 0; i < this.columns.length; i++) {\n            if (this.columns[i] == name) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getAllColumns(): Array<string> {\n        var result: Array<string> = [];\n        for (var i: number = 0; i < this.columns.length; i++) {\n            result.push(this.columns[i]);\n        }\n        return result;\n    }\n\n    getObservationColumns(): Array<string> {\n        var result: Array<string> = [];\n        for (var i: number = 0; i < this.columns.length; i++) {\n            result.push(this.columns[i]);\n        }\n        return result;\n\n    }\n\n    getSeriesColumns(): Array<string> {\n        return [];\n    }\n\n    getDataSetColumns(): Array<string> {\n        return [];\n    }\n\n    getGroupColumns(): Array<string> {\n        return [];\n    }\n\n    isAttachedToDataSetString(s: string): boolean {\n        return false;\n    }\n\n    isAttachedToDataSetInt(i: number): boolean {\n        return false;\n    }\n\n    isAttachedToSeriesString(s: string): boolean {\n        return false;\n    }\n\n    isAttachedToSeriesInt(i: number): boolean {\n        return false;\n    }\n\n    isAttachedToObservationString(s: string): boolean {\n        return collections.arrays.contains(this.columns, s);\n    }\n\n    isAttachedToObservationInt(i: number): boolean {\n        return true;\n    }\n\n    isAttachedToGroupString(s: string): boolean {\n        return collections.arrays.contains(this.groupColumns, s);\n    }\n\n    isAttachedToGroupInt(i: number): boolean {\n        return this.isAttachedToGroupString(this.getColumnName(i));\n    }\n\n    dump() {\n        console.log(\"Column Mapper\");\n        for (var i: number = 0; i < this.size(); i++) {\n            console.log(i + \" = \" + this.getColumnName(i));\n        }\n\n    }\n}\n\nexport class FlatDataSet implements interfaces.DataSet {\n\n    private groups: Array<Group> = [];\n    private mapper: FlatColumnMapper = new FlatColumnMapper();\n    private observations: Array<FlatObs> = [];\n\n    private dimensionAtObservation: string = \"AllDimensions\";\n\n    public FlatDataSet() {\n    }\n\n    getColumnIndex(name: string): number {\n        return this.mapper.getColumnIndex(name);\n    }\n\n    getValue(row: number, col: number): string {\n        if (this.observations[row] == null) {\n            console.log(\"null obs!\");\n        }\n        return this.observations[row].getValue(col);\n    }\n\n    setValueStringCol(row: number, col: string, val: string) {\n        this.setValue(row, this.mapper.getColumnIndex(col), val);\n    }\n\n    setValue(row: number, col: number, val: string) {\n        this.observations[row].setValue(col, val);\n    }\n\n    addObservation(o: FlatObs) {\n        this.observations.push(o);\n    }\n\n    removeObservation(o: FlatObs) {\n        collections.arrays.remove(this.observations, o);\n    }\n\n    getObservations() {\n        return this.observations;\n    }\n    size(): number {\n        return this.observations.length;\n    }\n\n    getColumnMapper(): FlatColumnMapper {\n        return this.mapper;\n    }\n\n    dump() {\n        var s: string = \"\";\n        for (var i: number = 0; i < this.mapper.size(); i++) {\n            s += this.getColumnMapper().getColumnName(i);\n            s += \"\\t\";\n        }\n        console.log(s);\n        for (var i: number = 0; i < this.observations.length; i++) {\n            var o: FlatObs = this.getFlatObs(i);\n            var s: string = \"\";\n            for (var j: number = 0; j < this.mapper.size(); j++) {\n                s = s + o.getValue(j);\n                if (j < this.mapper.size()) s = s + \"\\t\";\n            }\n            console.log(s);\n        }\n    }\n    getFlatObs(i: number): FlatObs {\n        return this.observations[i];\n    }\n    registerColumn(s: string) {\n        var col: number = this.mapper.registerColumn(s, AttachmentLevel.OBSERVATION);\n        for (var i: number = 0; i < this.observations.length; i++) {\n            this.observations[i].setValue(col, null);\n        }\n        return col;\n    }\n\n    getColumnName(i: number): string {\n        return this.mapper.getColumnName(i);\n    }\n\n    getColumnSize(): number {\n        return this.mapper.size();\n    }\n\n    getGroups() {\n        return [];\n    }\n\n    groupSize(): number {\n        return 0;\n    }\n\n    applyGroupKey(key: PartialKey, column: string, value: string) {\n    }\n\n    setGroups(groups: Array<Group>) {\n    }\n\n    query(cube: Cube, order: Array<string>): Cube {\n        var time: number = new Date().getTime();\n        for (var i: number = 0; i < this.size(); i++) {\n            cube.putObservation(order, this.mapper, this.getFlatObs(i));\n        }\n        return cube;\n    }\n\n    find(key: FullKey): FlatObs {\n        var found: boolean = true;\n        for (var i: number = 0; i < this.size(); i++) {\n            var obs: FlatObs = this.getFlatObs(i);\n            found = true;\n            for (var j: number = 0; j < this.mapper.size() && !found; j++) {\n                if (!(key.getComponent(this.mapper.getColumnName(j)) == obs.getValue(j))) {\n                    found = false;\n                }\n            }\n            if (found) {\n                return obs;\n            }\n        }\n        return null;\n    }\n    getDimensionAtObservation(reg: interfaces.LocalRegistry, dsref: commonreferences.Reference) {\n        return \"AllDimensions\";\n    }\n\n    setDimensionAtObservationString(s: string) {\n        this.dimensionAtObservation = s;\n    }\n\n    getDimensionAtObservationString(): string {\n        return this.dimensionAtObservation;\n    }\n}\nexport class FlatDataSetWriter implements interfaces.DataSetWriter {\n\n    private mapper: FlatColumnMapper = new FlatColumnMapper();\n    private dataSet: FlatDataSet = null;\n    private dataSetValues: Array<string> = null;\n    private seriesValues: Array<string> = null;\n    private obsValues: Array<string> = null;\n    private groups: Array<Group> = null;\n\n    constructor() {\n    }\n\n    newDataSet() {\n        this.dataSet = new FlatDataSet();\n        this.dataSetValues = [];\n        this.mapper = this.dataSet.getColumnMapper();\n    }\n\n    newSeries() {\n        this.seriesValues = [];\n        for (var i: number = 0; i < this.dataSetValues.length; i++) {\n            this.seriesValues.push(this.dataSetValues[i]);\n        }\n    }\n\n    newObservation() {\n        this.obsValues = [];\n        if (this.seriesValues != null) {\n            for (var i: number = 0; i < this.seriesValues.length; i++) {\n                this.obsValues.push(this.seriesValues[i]);\n            }\n        }\n    }\n\n    writeDataSetComponent(name: string, val: string) {\n        if (!this.dataSet.getColumnMapper().containsColumn(name)) {\n            this.dataSet.registerColumn(name);\n        }\n        this.dataSetValues.push(val);\n    }\n\n    writeSeriesComponent(name: string, val: string) {\n        if (!this.dataSet.getColumnMapper().containsColumn(name)) {\n            this.dataSet.registerColumn(name);\n        }\n        this.seriesValues.push(val);\n    }\n\n    writeObservationComponent(name: string, val: string) {\n        if (!this.dataSet.getColumnMapper().containsColumn(name)) {\n            this.dataSet.registerColumn(name);\n        }\n        if (this.obsValues.length <= this.dataSet.getColumnMapper().getColumnIndex(name)) {\n            for (var j: number = this.obsValues.length; (j - 1) < this.dataSet.getColumnIndex(name); j++) {\n                this.obsValues.push(null);\n            }\n        }\n        this.obsValues[this.dataSet.getColumnIndex(name)] = val;\n    }\n\n    finishSeries() {\n\n    }\n\n    finishObservation() {\n        this.dataSet.addObservation(new FlatObs(this.obsValues));\n    }\n\n    finishDataSet(): FlatDataSet {\n        var ds: FlatDataSet = this.dataSet;\n        ds.setGroups(this.groups);\n        this.dataSet = null;\n        return ds;\n    }\n\n    getColumnMapper(): FlatColumnMapper {\n        return this.mapper;\n    }\n\n    writeGroupValues(name: string, groupValues: collections.Dictionary<string, any>) {\n        var group: Group = Group.Group(groupValues);\n        group.setGroupName(name);\n        if (this.groups == null) {\n            this.groups = [];\n        }\n        this.groups.push(group);\n    }\n}\nexport class StructuredDataMessage {\n\n    private dataMessage: message.DataMessage = null;\n    private registry: interfaces.LocalRegistry = null;\n    private dataflow: structure.Dataflow = null;\n\n    private list: Array<StructuredDataSet> = [];\n\n    constructor(dm: message.DataMessage, reg: interfaces.LocalRegistry) {\n        this.dataMessage = dm;\n        this.registry = reg;\n        for (var i: number = 0; i < this.dataMessage.size(); i++) {\n            this.list.push(this.buildStructuredDataSet(i));\n        }\n    }\n\n    public size(): number {\n        return this.getDataMessage().size();\n    }\n\n    public getStructuredDataSet(i: number): StructuredDataSet {\n        return this.list[i];\n    }\n\n    public buildStructuredDataSet(i: number): StructuredDataSet {\n        //dataMessage.getHeader().getStructures().get(0).getStructure().dump();\n        //NestedNCNameID agency = dataMessage.getHeader().getStructures().get(0).getStructure().getAgencyId();\n        //IDType id = dataMessage.getHeader().getStructures().get(0).getStructure().getMaintainableParentId();\n        //Version vers = dataMessage.getHeader().getStructures().get(0).getStructure().getMaintainedParentVersion();\n        //System.out.println(\"Ref=\"+agency+\":\"+id+\":\"+vers);\n        var structure: structure.DataStructure = this.getRegistry().findDataStructure(this.getDataMessage().getHeader().getStructures()[0].getStructure());\n        //System.out.println(\"Structure=\"+structure);\n        if (this.dataflow == null) {\n            this.setDataflow(structure.asDataflow());\n        }\n        return new StructuredDataSet(this.getDataMessage().getDataSet(i), this.getRegistry(), structure);\n    }\n\n    /**\n     * @return the dataMessage\n     */\n    public getDataMessage(): message.DataMessage {\n        return this.dataMessage;\n    }\n\n    /**\n     * @return the registry\n     */\n    public getRegistry(): interfaces.LocalRegistry {\n        return this.registry;\n    }\n\n    /**\n     * @return the dataflow\n     */\n    public getDataflow(): structure.Dataflow {\n        return this.dataflow;\n    }\n\n    /**\n     * @param dataflow the dataflow to set\n     */\n    public setDataflow(dataflow: structure.Dataflow) {\n        this.dataflow = dataflow;\n    }\n}\nexport class StructuredDataSet {\n    private dataSet: interfaces.DataSet = null;\n    private registry: interfaces.LocalRegistry = null;\n    private structure: structure.DataStructure = null;\n\n    constructor(ds: interfaces.DataSet, reg: interfaces.LocalRegistry, struct: structure.DataStructure) {\n        this.dataSet = ds;\n        this.registry = reg;\n        this.structure = struct;\n    }\n\n    public getStructuredValue(row: number, column: number): StructuredValue {\n        return new StructuredValue(this.getDataSet().getColumnName(column), this.getDataSet().getValue(row, column), this.registry, this.getStructure());\n    }\n\n    public getColumnName(i: number): string {\n        var conceptString: string = this.getDataSet().getColumnName(i);\n        //System.out.println(\"Concept=\"+conceptString);\n        //System.out.println(\"ds=\"+getStructure());\n        var c: structure.Component = this.getStructure().findComponentString(conceptString);\n        if (c == null && conceptString == \"type\") {\n            // \"type\" represents sdmx 2.0 cross sectional document \n            c = this.getStructure().getDataStructureComponents().getDimensionList().getMeasureDimension();\n        }\n        if (c == null) {\n            console.log(\"Component is null conceptRef:\" + conceptString);\n            return conceptString;\n        }\n        var conceptRef = c.getConceptIdentity();\n        var concept: structure.ConceptType = null;\n        if (conceptRef != null) {\n            concept = this.registry.findConcept(conceptRef);\n            return structure.NameableType.toString(concept);\n        } else {\n            throw new Error(\"Can't find Concept:\" + conceptString);\n        }\n    }\n\n    public size(): number {\n        return this.getDataSet().size();\n    }\n\n    public getColumnCount(): number {\n        return this.getDataSet().getColumnSize();\n    }\n\n    /**\n     * @return the dataSet\n     */\n    public getDataSet(): interfaces.DataSet {\n        return this.dataSet;\n    }\n\n    /**\n     * @return the structure\n     */\n    public getStructure(): structure.DataStructure {\n        return this.structure;\n    }\n    public getColumnIndexes(): Array<number> {\n        var result = [];\n        for (var i: number = 0; i < this.getColumnCount(); i++) {\n            result.push(i);\n        }\n        return result;\n    }\n}\nexport class StructuredValue {\n    public getRepresentation(reg: interfaces.LocalRegistry, c: structure.Component): structure.RepresentationType {\n        var rep: structure.RepresentationType = c.getLocalRepresentation();\n        if (rep == null) {\n            var concept: structure.ConceptType = reg.findConcept(c.getConceptIdentity());\n            //return concept.getCoreRepresentation();\n        }\n        return c.getLocalRepresentation();\n    }\n    public getLocalRepresentation(c: structure.Component): structure.RepresentationType {\n        if (c == null) return null;\n        return c.getLocalRepresentation();\n    }\n    private concept: string = null;\n    private value: string = null;\n    private registry: interfaces.LocalRegistry = null;\n    private structure: structure.DataStructure = null;\n\n    public constructor(concept: string, value: string, registry: interfaces.LocalRegistry, struct: structure.DataStructure) {\n        this.concept = concept;\n        this.value = value;\n        this.registry = registry;\n        this.structure = struct;\n    }\n\n    public isCoded(): boolean {\n        var comp: structure.Component = this.structure.findComponentString(this.concept);\n        if (\"type\" == this.concept) {\n            comp = this.structure.getDataStructureComponents().getDimensionList().getMeasureDimension();\n        }\n        if (comp == null) {\n            console.log(\"Comp is NUll!\" + this.concept);\n            return false;\n        }\n        var localRep: structure.RepresentationType = this.getRepresentation(this.registry, comp);\n        if (localRep.getEnumeration() != null) {\n            return true;\n        }\n        else return false;\n    }\n\n    public getCode(): structure.ItemType {\n        //System.out.println(\"Concept:\"+ concept+\" Value:\" + value);\n        //Locale loc = Locale.getDefault();\n        //ItemType item = ValueTypeResolver.resolveCode(registry, structure, concept, value);\n        //System.out.println(\"Item=\" + item.toString());\n        //System.out.println(\"Item=\" + item.findName(loc.getLanguage()));\n        return ValueTypeResolver.resolveCode(this.registry, this.structure, this.concept, this.getValue());\n    }\n\n    public getCodelist(): structure.ItemSchemeType {\n        return ValueTypeResolver.getPossibleCodes(this.registry, this.structure, this.concept);\n    }\n\n    public toString(): string {\n        if (this.isCoded()) {\n            var code: structure.ItemType = this.getCode();\n            if (code == null) {\n                return this.getValue();\n            }\n            return structure.NameableType.toString(code);\n        }\n        return this.getValue();\n    }\n\n    /**\n     * @return the concept\n     */\n    public getConcept(): structure.ConceptType {\n        return this.registry.findConcept(this.structure.findComponentString(this.concept).getConceptIdentity());\n    }\n\n    /**\n     * @return the value\n     */\n    public getValue(): string {\n        return this.value;\n    }\n}\nexport class ValueTypeResolver {\n\n    public static resolveCode(registry: interfaces.LocalRegistry, struct: structure.DataStructure, column: string, value: string): structure.ItemType {\n        if (value == null) {\n            return null;\n        }\n        var dim: structure.Component = struct.findComponentString(column);\n        // Cross Sectional Measures somtimes come in a a 'type' column..\n        // see SDMX 2.0 example cross sectional file\n        if (\"type\" == column) {\n            dim = struct.getDataStructureComponents().getDimensionList().getMeasureDimension();\n        }\n        if (dim == null) {\n            var itm: structure.CodeType = new structure.CodeType();\n            var name: common.Name = new common.Name(sdmx.SdmxIO.getLocale(), value);\n            var names: Array<common.Name> = [name];\n            itm.setNames(names);\n            return itm;\n        }\n        var conceptRef = dim.getConceptIdentity();\n        var rep: structure.RepresentationType = null;\n        var concept: structure.ConceptType = null;\n        if (conceptRef != null) {\n            concept = registry.findConcept(conceptRef);\n            if (concept == null) {\n                console.log(\"Cant find concept:\" + dim.getConceptIdentity().getId());\n                console.log(conceptRef.getAgencyId() + \":\" + conceptRef.getMaintainableParentId() + \":\" + conceptRef.getId() + \":\" + conceptRef.getVersion());\n                var ct: structure.CodeType = new structure.CodeType();\n                ct.setId(new commonreferences.ID(value));\n                var name: common.Name = new common.Name(\"en\", value);\n                ct.setNames([name]);\n                return ct;\n            }\n            rep = dim.getLocalRepresentation();\n        }\n        if (rep != null) {\n            if (rep.getEnumeration() != null) {\n                if (rep.getEnumeration().getRefClass().toInt() == commonreferences.ObjectTypeCodelistType.CODELIST.toInt()) {\n                    var codelist: structure.Codelist = registry.findCodelist(rep.getEnumeration());\n                    var id: commonreferences.ID = null;\n                    try {\n                        id = new commonreferences.ID(value);\n                    } catch (err) {\n                        // Ignore\n                    }\n                    if (codelist == null) {\n                        throw new Error(\"Codelist is null Representation=\" + rep.getEnumeration().toString());\n                    }\n                    var ct: structure.CodeType = null;\n                    if (id != null) {\n                        ct = codelist.findItemId(id);\n                    }\n                    if (ct == null) {\n                        var ct2: structure.CodeType = new structure.CodeType();\n                        ct2.setId(id);\n                        var name: common.Name = new common.Name(\"en\", \"Missing Code:\" + value);\n                        var names: Array<common.Name> = [];\n                        names.push(name);\n                        ct2.setNames(names);\n                        return ct2;\n                    } else {\n                        return ct;\n                    }\n                } else {\n                    var cs: structure.ConceptSchemeType = registry.findConceptScheme(rep.getEnumeration());\n                    var conceptMeasure: structure.ConceptType = null;\n                    for (var i: number = 0; i < cs.size() && conceptMeasure == null; i++) {\n                        var tempConcept: structure.ConceptType = cs.getItem(i);\n                        if (tempConcept.getId() != null && tempConcept.getId().toString() == value) {\n                            conceptMeasure = cs.getItem(i);\n                        } else if (tempConcept.getId().toString() == value) {\n                            conceptMeasure = tempConcept;\n                        }\n                    }\n                    if (conceptMeasure != null) {\n                        //System.out.println(\"ConceptMeasure:\"+conceptMeasure);\n                        return conceptMeasure;\n\n                    }\n                    return null;\n                }\n            }\n            else {\n                var itm: structure.CodeType = new structure.CodeType();\n                var name: common.Name = new common.Name(sdmx.SdmxIO.getLocale(), value);\n                var names: Array<common.Name> = [name];\n                itm.setNames(names);\n                return itm;\n            }\n        }\n        var itm: structure.CodeType = new structure.CodeType();\n        var name: common.Name = new common.Name(sdmx.SdmxIO.getLocale(), value);\n        var names: Array<common.Name> = [name];\n        itm.setNames(names);\n        return itm;\n    }\n\n    public static getPossibleCodes(registry: interfaces.LocalRegistry, struct: structure.DataStructure, column: string): structure.ItemSchemeType {\n        var dim: structure.Component = struct.findComponentString(column);\n        if (dim == null || \"type\" == column) {\n            dim = struct.getDataStructureComponents().getDimensionList().getMeasureDimension();\n        }\n        var conceptRef = dim.getConceptIdentity();\n        var rep: structure.RepresentationType = null;\n        var concept: structure.ConceptType = null;\n        if (conceptRef != null) {\n            concept = registry.findConcept(conceptRef);\n            rep = dim.getLocalRepresentation();\n        }\n        if (rep != null) {\n            if (rep.getEnumeration() != null) {\n                if (rep.getEnumeration().getRefClass().toInt() == commonreferences.ObjectTypeCodelistType.CODELIST.toInt()) {\n                    var codelist: structure.Codelist = registry.findCodelist(rep.getEnumeration());\n                    return codelist;\n                } else {\n                    var cs: structure.ConceptSchemeType = registry.findConceptScheme(rep.getEnumeration());\n                    return cs;\n                }\n            }\n        }\n        return null;\n    }\n\n}"],"sourceRoot":"/source/"}