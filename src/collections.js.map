{"version":3,"sources":["collections.ts"],"names":[],"mappings":"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","file":"collections.js","sourcesContent":["// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\r\n//\r\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\r\n//\r\n// Orginal javascript code was by Mauricio Santos\r\n\r\n/**\r\n * @namespace Top level namespace for collections, a TypeScript data structure library.\r\n */\r\nmodule collections {\r\n    \r\n    var _hasOwnProperty = Object.prototype.hasOwnProperty;\r\n    var has = function(obj: any, prop: any) {\r\n        return _hasOwnProperty.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n    * Function signature for comparing\r\n    * <0 means a is smaller\r\n    * = 0 means they are equal\r\n    * >0 means a is larger\r\n    */\r\n    export interface ICompareFunction<T>{\r\n        (a: T, b: T): number;\r\n    }\r\n\r\n    /**\r\n    * Function signature for checking equality\r\n    */\r\n    export interface IEqualsFunction<T>{\r\n        (a: T, b: T): boolean;\r\n    }\r\n\r\n    /**\r\n    * Function signature for Iterations. Return false to break from loop\r\n    */\r\n    export interface ILoopFunction<T>{\r\n        (a: T): boolean | void;\r\n    }\r\n\r\n    /**\r\n     * Default function to compare element order.\r\n     * @function     \r\n     */\r\n    export function defaultCompare<T>(a: T, b: T): number {\r\n        if (a < b) {\r\n            return -1;\r\n        } else if (a === b) {\r\n            return 0;\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Default function to test equality. \r\n     * @function     \r\n     */\r\n    export function defaultEquals<T>(a: T, b: T): boolean {\r\n        return a === b;\r\n    }\r\n\r\n    /**\r\n     * Default function to convert an object to a string.\r\n     * @function     \r\n     */\r\n    export function defaultToString(item: any): string {\r\n        if (item === null) {\r\n            return 'COLLECTION_NULL';\r\n        } else if (collections.isUndefined(item)) {\r\n            return 'COLLECTION_UNDEFINED';\r\n        } else if (collections.isString(item)) {\r\n            return '$s' + item;\r\n        } else {\r\n            return '$o' + item.toString();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Joins all the properies of the object using the provided join string \r\n    */\r\n    export function makeString<T>(item: T, join: string = \",\"): string {\r\n        if (item === null) {\r\n            return 'COLLECTION_NULL';\r\n        } else if (collections.isUndefined(item)) {\r\n            return 'COLLECTION_UNDEFINED';\r\n        } else if (collections.isString(item)) {\r\n            return item.toString();\r\n        } else {\r\n            var toret = \"{\";\r\n            var first = true;\r\n            for (var prop in item) {\r\n                if (has(item, prop)) {\r\n                    if (first)\r\n                        first = false;\r\n                    else\r\n                        toret = toret + join;\r\n                    toret = toret + prop + \":\" + (<any>item)[prop];\r\n                }\r\n            }\r\n            return toret + \"}\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the given argument is a function.\r\n     * @function     \r\n     */\r\n    export function isFunction(func: any): boolean {\r\n        return (typeof func) === 'function';\r\n    }\r\n\r\n    /**\r\n     * Checks if the given argument is undefined.\r\n     * @function\r\n     */\r\n    export function isUndefined(obj: any): boolean {\r\n        return (typeof obj) === 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Checks if the given argument is a string.\r\n     * @function\r\n     */\r\n    export function isString(obj: any): boolean {\r\n        return Object.prototype.toString.call(obj) === '[object String]';\r\n    }\r\n\r\n    /**\r\n     * Reverses a compare function.\r\n     * @function\r\n     */\r\n    export function reverseCompareFunction<T>(compareFunction: ICompareFunction<T>): ICompareFunction<T> {\r\n        if (!collections.isFunction(compareFunction)) {\r\n            return function (a, b) {\r\n                if (a < b) {\r\n                    return 1;\r\n                } else if (a === b) {\r\n                    return 0;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            };\r\n        } else {\r\n            return function (d: T, v: T) {\r\n                return compareFunction(d, v) * -1;\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an equal function given a compare function.\r\n     * @function\r\n     */\r\n    export function compareToEquals<T>(compareFunction: ICompareFunction<T>): IEqualsFunction<T> {\r\n        return function (a: T, b: T) {\r\n            return compareFunction(a, b) === 0;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @namespace Contains various functions for manipulating arrays.\r\n     */\r\n    export module arrays {\r\n\r\n        /**\r\n         * Returns the position of the first occurrence of the specified item\r\n         * within the specified array.\r\n         * @param {*} array the array in which to search the element.\r\n         * @param {Object} item the element to search.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to \r\n         * check equality between 2 elements.\r\n         * @return {number} the position of the first occurrence of the specified element\r\n         * within the specified array, or -1 if not found.\r\n         */\r\n        export function indexOf<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): number {\r\n            var equals = equalsFunction || collections.defaultEquals;\r\n            var length = array.length;\r\n            for (var i = 0; i < length; i++) {\r\n                if (equals(array[i], item)) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        /**\r\n         * Returns the position of the last occurrence of the specified element\r\n         * within the specified array.\r\n         * @param {*} array the array in which to search the element.\r\n         * @param {Object} item the element to search.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to \r\n         * check equality between 2 elements.\r\n         * @return {number} the position of the last occurrence of the specified element\r\n         * within the specified array or -1 if not found.\r\n         */\r\n        export function lastIndexOf<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): number {\r\n            var equals = equalsFunction || collections.defaultEquals;\r\n            var length = array.length;\r\n            for (var i = length - 1; i >= 0; i--) {\r\n                if (equals(array[i], item)) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        /**\r\n         * Returns true if the specified array contains the specified element.\r\n         * @param {*} array the array in which to search the element.\r\n         * @param {Object} item the element to search.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function to \r\n         * check equality between 2 elements.\r\n         * @return {boolean} true if the specified array contains the specified element.\r\n         */\r\n        export function contains<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): boolean {\r\n            return arrays.indexOf(array, item, equalsFunction) >= 0;\r\n        }\r\n\r\n\r\n        /**\r\n         * Removes the first ocurrence of the specified element from the specified array.\r\n         * @param {*} array the array in which to search element.\r\n         * @param {Object} item the element to search.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function to \r\n         * check equality between 2 elements.\r\n         * @return {boolean} true if the array changed after this call.\r\n         */\r\n        export function remove<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): boolean {\r\n            var index = arrays.indexOf(array, item, equalsFunction);\r\n            if (index < 0) {\r\n                return false;\r\n            }\r\n            array.splice(index, 1);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in the specified array equal\r\n         * to the specified object.\r\n         * @param {Array} array the array in which to determine the frequency of the element.\r\n         * @param {Object} item the element whose frequency is to be determined.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to \r\n         * check equality between 2 elements.\r\n         * @return {number} the number of elements in the specified array \r\n         * equal to the specified object.\r\n         */\r\n        export function frequency<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): number {\r\n            var equals = equalsFunction || collections.defaultEquals;\r\n            var length = array.length;\r\n            var freq = 0;\r\n            for (var i = 0; i < length; i++) {\r\n                if (equals(array[i], item)) {\r\n                    freq++;\r\n                }\r\n            }\r\n            return freq;\r\n        }\r\n\r\n        /**\r\n         * Returns true if the two specified arrays are equal to one another.\r\n         * Two arrays are considered equal if both arrays contain the same number\r\n         * of elements, and all corresponding pairs of elements in the two \r\n         * arrays are equal and are in the same order. \r\n         * @param {Array} array1 one array to be tested for equality.\r\n         * @param {Array} array2 the other array to be tested for equality.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to \r\n         * check equality between elemements in the arrays.\r\n         * @return {boolean} true if the two arrays are equal\r\n         */\r\n        export function equals<T>(array1: T[], array2: T[], equalsFunction?: collections.IEqualsFunction<T>): boolean {\r\n            var equals = equalsFunction || collections.defaultEquals;\r\n\r\n            if (array1.length !== array2.length) {\r\n                return false;\r\n            }\r\n            var length = array1.length;\r\n            for (var i = 0; i < length; i++) {\r\n                if (!equals(array1[i], array2[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Returns shallow a copy of the specified array.\r\n         * @param {*} array the array to copy.\r\n         * @return {Array} a copy of the specified array\r\n         */\r\n        export function copy<T>(array: T[]): T[] {\r\n            return array.concat();\r\n        }\r\n\r\n        /**\r\n         * Swaps the elements at the specified positions in the specified array.\r\n         * @param {Array} array The array in which to swap elements.\r\n         * @param {number} i the index of one element to be swapped.\r\n         * @param {number} j the index of the other element to be swapped.\r\n         * @return {boolean} true if the array is defined and the indexes are valid.\r\n         */\r\n        export function swap<T>(array: T[], i: number, j: number): boolean {\r\n            if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\r\n                return false;\r\n            }\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n            return true;\r\n        }\r\n\r\n        export function toString<T>(array: T[]): string {\r\n            return '[' + array.toString() + ']';\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this array \r\n         * starting from index 0 to length - 1.\r\n         * @param {Array} array The array in which to iterate.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        export function forEach<T>(array: T[], callback: ILoopFunction<T>): void {\r\n            var lenght = array.length;\r\n            for (var i = 0; i < lenght; i++) {\r\n                if (callback(array[i]) === false) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // A linked list node\r\n    export interface ILinkedListNode<T>{\r\n        element: T;\r\n        next: ILinkedListNode<T>;\r\n    }\r\n\r\n    export class LinkedList<T> {\r\n\r\n        /**\r\n        * First node in the list\r\n        * @type {Object}\r\n        * @private\r\n        */\r\n        public firstNode: ILinkedListNode<T> = null;\r\n        /**\r\n        * Last node in the list\r\n        * @type {Object}\r\n        * @private\r\n        */\r\n        private lastNode: ILinkedListNode<T> = null;\r\n\r\n        /**\r\n        * Number of elements in the list\r\n        * @type {number}\r\n        * @private\r\n        */\r\n        private nElements = 0;\r\n\r\n        /**\r\n        * Creates an empty Linked List.\r\n        * @class A linked list is a data structure consisting of a group of nodes\r\n        * which together represent a sequence.\r\n        * @constructor\r\n        */\r\n        constructor() {\r\n        }\r\n\r\n        /**\r\n        * Adds an element to this list.\r\n        * @param {Object} item element to be added.\r\n        * @param {number=} index optional index to add the element. If no index is specified\r\n        * the element is added to the end of this list.\r\n        * @return {boolean} true if the element was added or false if the index is invalid\r\n        * or if the element is undefined.\r\n        */\r\n        add(item: T, index?: number): boolean {\r\n            if (collections.isUndefined(index)) {\r\n                index = this.nElements;\r\n            }\r\n            if (index < 0 || index > this.nElements || collections.isUndefined(item)) {\r\n                return false;\r\n            }\r\n            var newNode = this.createNode(item);\r\n            if (this.nElements === 0) {\r\n                // First node in the list.\r\n                this.firstNode = newNode;\r\n                this.lastNode = newNode;\r\n            } else if (index === this.nElements) {\r\n                // Insert at the end.\r\n                this.lastNode.next = newNode;\r\n                this.lastNode = newNode;\r\n            } else if (index === 0) {\r\n                // Change first node.\r\n                newNode.next = this.firstNode;\r\n                this.firstNode = newNode;\r\n            } else {\r\n                var prev = this.nodeAtIndex(index - 1);\r\n                newNode.next = prev.next;\r\n                prev.next = newNode;\r\n            }\r\n            this.nElements++;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * Returns the first element in this list.\r\n        * @return {*} the first element of the list or undefined if the list is\r\n        * empty.\r\n        */\r\n        first(): T {\r\n\r\n            if (this.firstNode !== null) {\r\n                return this.firstNode.element;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n        * Returns the last element in this list.\r\n        * @return {*} the last element in the list or undefined if the list is\r\n        * empty.\r\n        */\r\n        last(): T {\r\n\r\n            if (this.lastNode !== null) {\r\n                return this.lastNode.element;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Returns the element at the specified position in this list.\r\n         * @param {number} index desired index.\r\n         * @return {*} the element at the given index or undefined if the index is\r\n         * out of bounds.\r\n         */\r\n        elementAtIndex(index: number): T {\r\n\r\n            var node = this.nodeAtIndex(index);\r\n            if (node === null) {\r\n                return undefined;\r\n            }\r\n            return node.element;\r\n        }\r\n\r\n        /**\r\n         * Returns the index in this list of the first occurrence of the\r\n         * specified element, or -1 if the List does not contain this element.\r\n         * <p>If the elements inside this list are\r\n         * not comparable with the === operator a custom equals function should be\r\n         * provided to perform searches, the function must receive two arguments and\r\n         * return true if they are equal, false otherwise. Example:</p>\r\n         *\r\n         * <pre>\r\n         * var petsAreEqualByName = function(pet1, pet2) {\r\n         *  return pet1.name === pet2.name;\r\n         * }\r\n         * </pre>\r\n         * @param {Object} item element to search for.\r\n         * @param {function(Object,Object):boolean=} equalsFunction Optional\r\n         * function used to check if two elements are equal.\r\n         * @return {number} the index in this list of the first occurrence\r\n         * of the specified element, or -1 if this list does not contain the\r\n         * element.\r\n         */\r\n        indexOf(item: T, equalsFunction?: IEqualsFunction<T>): number {\r\n\r\n            var equalsF = equalsFunction || collections.defaultEquals;\r\n            if (collections.isUndefined(item)) {\r\n                return -1;\r\n            }\r\n            var currentNode = this.firstNode;\r\n            var index = 0;\r\n            while (currentNode !== null) {\r\n                if (equalsF(currentNode.element, item)) {\r\n                    return index;\r\n                }\r\n                index++;\r\n                currentNode = currentNode.next;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n\r\n        /**\r\n           * Returns true if this list contains the specified element.\r\n           * <p>If the elements inside the list are\r\n           * not comparable with the === operator a custom equals function should be\r\n           * provided to perform searches, the function must receive two arguments and\r\n           * return true if they are equal, false otherwise. Example:</p>\r\n           *\r\n           * <pre>\r\n           * var petsAreEqualByName = function(pet1, pet2) {\r\n           *  return pet1.name === pet2.name;\r\n           * }\r\n           * </pre>\r\n           * @param {Object} item element to search for.\r\n           * @param {function(Object,Object):boolean=} equalsFunction Optional\r\n           * function used to check if two elements are equal.\r\n           * @return {boolean} true if this list contains the specified element, false\r\n           * otherwise.\r\n           */\r\n        contains(item: T, equalsFunction?: IEqualsFunction<T>): boolean {\r\n            return (this.indexOf(item, equalsFunction) >= 0);\r\n        }\r\n\r\n        /**\r\n         * Removes the first occurrence of the specified element in this list.\r\n         * <p>If the elements inside the list are\r\n         * not comparable with the === operator a custom equals function should be\r\n         * provided to perform searches, the function must receive two arguments and\r\n         * return true if they are equal, false otherwise. Example:</p>\r\n         *\r\n         * <pre>\r\n         * var petsAreEqualByName = function(pet1, pet2) {\r\n         *  return pet1.name === pet2.name;\r\n         * }\r\n         * </pre>\r\n         * @param {Object} item element to be removed from this list, if present.\r\n         * @return {boolean} true if the list contained the specified element.\r\n         */\r\n        remove(item: T, equalsFunction?: IEqualsFunction<T>): boolean {\r\n            var equalsF = equalsFunction || collections.defaultEquals;\r\n            if (this.nElements < 1 || collections.isUndefined(item)) {\r\n                return false;\r\n            }\r\n            var previous: ILinkedListNode<T> = null;\r\n            var currentNode: ILinkedListNode<T> = this.firstNode;\r\n\r\n            while (currentNode !== null) {\r\n                if (equalsF(currentNode.element, item)) {\r\n\r\n                    if (currentNode === this.firstNode) {\r\n                        this.firstNode = this.firstNode.next;\r\n                        if (currentNode === this.lastNode) {\r\n                            this.lastNode = null;\r\n                        }\r\n                    } else if (currentNode === this.lastNode) {\r\n                        this.lastNode = previous;\r\n                        previous.next = currentNode.next;\r\n                        currentNode.next = null;\r\n                    } else {\r\n                        previous.next = currentNode.next;\r\n                        currentNode.next = null;\r\n                    }\r\n                    this.nElements--;\r\n                    return true;\r\n                }\r\n                previous = currentNode;\r\n                currentNode = currentNode.next;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this list.\r\n         */\r\n        clear(): void {\r\n            this.firstNode = null;\r\n            this.lastNode = null;\r\n            this.nElements = 0;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this list is equal to the given list.\r\n         * Two lists are equal if they have the same elements in the same order.\r\n         * @param {LinkedList} other the other list.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional\r\n         * function used to check if two elements are equal. If the elements in the lists\r\n         * are custom objects you should provide a function, otherwise \r\n         * the === operator is used to check equality between elements.\r\n         * @return {boolean} true if this list is equal to the given list.\r\n         */\r\n        equals(other: LinkedList<T>, equalsFunction?: IEqualsFunction<T>): boolean {\r\n            var eqF = equalsFunction || collections.defaultEquals;\r\n            if (!(other instanceof collections.LinkedList)) {\r\n                return false;\r\n            }\r\n            if (this.size() !== other.size()) {\r\n                return false;\r\n            }\r\n            return this.equalsAux(this.firstNode, other.firstNode, eqF);\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private equalsAux(n1: ILinkedListNode<T>, n2: ILinkedListNode<T>, eqF: IEqualsFunction<T>): boolean {\r\n            while (n1 !== null) {\r\n                if (!eqF(n1.element, n2.element)) {\r\n                    return false;\r\n                }\r\n                n1 = n1.next;\r\n                n2 = n2.next;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Removes the element at the specified position in this list.\r\n         * @param {number} index given index.\r\n         * @return {*} removed element or undefined if the index is out of bounds.\r\n         */\r\n        removeElementAtIndex(index: number): T {\r\n            if (index < 0 || index >= this.nElements) {\r\n                return undefined;\r\n            }\r\n            var element: T;\r\n            if (this.nElements === 1) {\r\n                //First node in the list.\r\n                element = this.firstNode.element;\r\n                this.firstNode = null;\r\n                this.lastNode = null;\r\n            } else {\r\n                var previous = this.nodeAtIndex(index - 1);\r\n                if (previous === null) {\r\n                    element = this.firstNode.element;\r\n                    this.firstNode = this.firstNode.next;\r\n                } else if (previous.next === this.lastNode) {\r\n                    element = this.lastNode.element;\r\n                    this.lastNode = previous;\r\n                }\r\n                if (previous !== null) {\r\n                    element = previous.next.element;\r\n                    previous.next = previous.next.next;\r\n                }\r\n            }\r\n            this.nElements--;\r\n            return element;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this list in order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>): void {\r\n            var currentNode = this.firstNode;\r\n            while (currentNode !== null) {\r\n                if (callback(currentNode.element) === false) {\r\n                    break;\r\n                }\r\n                currentNode = currentNode.next;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reverses the order of the elements in this linked list (makes the last \r\n         * element first, and the first element last).\r\n         */\r\n        reverse(): void {\r\n            var previous: ILinkedListNode<T> = null;\r\n            var current: ILinkedListNode<T> = this.firstNode;\r\n            var temp: ILinkedListNode<T> = null;\r\n            while (current !== null) {\r\n                temp = current.next;\r\n                current.next = previous;\r\n                previous = current;\r\n                current = temp;\r\n            }\r\n            temp = this.firstNode;\r\n            this.firstNode = this.lastNode;\r\n            this.lastNode = temp;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the elements in this list in proper\r\n         * sequence.\r\n         * @return {Array.<*>} an array containing all of the elements in this list,\r\n         * in proper sequence.\r\n         */\r\n        toArray(): T[] {\r\n            var array: T[] = [];\r\n            var currentNode: ILinkedListNode<T> = this.firstNode;\r\n            while (currentNode !== null) {\r\n                array.push(currentNode.element);\r\n                currentNode = currentNode.next;\r\n            }\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this list.\r\n         * @return {number} the number of elements in this list.\r\n         */\r\n        size(): number {\r\n            return this.nElements;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this list contains no elements.\r\n         * @return {boolean} true if this list contains no elements.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.nElements <= 0;\r\n        }\r\n\r\n        toString(): string {\r\n            return collections.arrays.toString(this.toArray());\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        private nodeAtIndex(index: number): ILinkedListNode<T> {\r\n\r\n            if (index < 0 || index >= this.nElements) {\r\n                return null;\r\n            }\r\n            if (index === (this.nElements - 1)) {\r\n                return this.lastNode;\r\n            }\r\n            var node = this.firstNode;\r\n            for (var i = 0; i < index; i++) {\r\n                node = node.next;\r\n            }\r\n            return node;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        private createNode(item: T): ILinkedListNode<T> {\r\n            return {\r\n                element: item,\r\n                next: null\r\n            };\r\n        }\r\n    } // End of linked list \r\n\r\n\r\n\r\n    // Used internally by dictionary \r\n    export interface IDictionaryPair<K, V>{\r\n        key: K;\r\n        value: V;\r\n    }\r\n\r\n    export class Dictionary<K, V>{\r\n\r\n        /**\r\n         * Object holding the key-value pairs.\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        protected table: { [key: string]: IDictionaryPair<K, V> };\r\n        //: [key: K] will not work since indices can only by strings in javascript and typescript enforces this. \r\n\r\n        /**\r\n         * Number of elements in the list.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        protected nElements: number;\r\n\r\n        /**\r\n         * Function used to convert keys to strings.\r\n         * @type {function(Object):string}\r\n         * @protected\r\n         */\r\n        protected toStr: (key: K) => string;\r\n\r\n\r\n        /**\r\n         * Creates an empty dictionary. \r\n         * @class <p>Dictionaries map keys to values; each key can map to at most one value.\r\n         * This implementation accepts any kind of objects as keys.</p>\r\n         *\r\n         * <p>If the keys are custom objects a function which converts keys to unique\r\n         * strings must be provided. Example:</p>\r\n         * <pre>\r\n         * function petToString(pet) {\r\n         *  return pet.name;\r\n         * }\r\n         * </pre>\r\n         * @constructor\r\n         * @param {function(Object):string=} toStrFunction optional function used\r\n         * to convert keys to strings. If the keys aren't strings or if toString()\r\n         * is not appropriate, a custom function which receives a key and returns a\r\n         * unique string must be provided.\r\n         */\r\n        constructor(toStrFunction?: (key: K) => string) {\r\n            this.table = {};\r\n            this.nElements = 0;\r\n            this.toStr = toStrFunction || collections.defaultToString;\r\n        }\r\n\r\n\r\n        /**\r\n         * Returns the value to which this dictionary maps the specified key.\r\n         * Returns undefined if this dictionary contains no mapping for this key.\r\n         * @param {Object} key key whose associated value is to be returned.\r\n         * @return {*} the value to which this dictionary maps the specified key or\r\n         * undefined if the map contains no mapping for this key.\r\n         */\r\n        getValue(key: K): V {\r\n            var pair: IDictionaryPair<K, V> = this.table['$' + this.toStr(key)];\r\n            if (collections.isUndefined(pair)) {\r\n                return undefined;\r\n            }\r\n            return pair.value;\r\n        }\r\n\r\n\r\n        /**\r\n         * Associates the specified value with the specified key in this dictionary.\r\n         * If the dictionary previously contained a mapping for this key, the old\r\n         * value is replaced by the specified value.\r\n         * @param {Object} key key with which the specified value is to be\r\n         * associated.\r\n         * @param {Object} value value to be associated with the specified key.\r\n         * @return {*} previous value associated with the specified key, or undefined if\r\n         * there was no mapping for the key or if the key/value are undefined.\r\n         */\r\n        setValue(key: K, value: V): V {\r\n\r\n            if (collections.isUndefined(key) || collections.isUndefined(value)) {\r\n                return undefined;\r\n            }\r\n\r\n            var ret: V;\r\n            var k = '$' + this.toStr(key);\r\n            var previousElement: IDictionaryPair<K, V> = this.table[k];\r\n            if (collections.isUndefined(previousElement)) {\r\n                this.nElements++;\r\n                ret = undefined;\r\n            } else {\r\n                ret = previousElement.value;\r\n            }\r\n            this.table[k] = {\r\n                key: key,\r\n                value: value\r\n            };\r\n            return ret;\r\n        }\r\n\r\n        /**\r\n         * Removes the mapping for this key from this dictionary if it is present.\r\n         * @param {Object} key key whose mapping is to be removed from the\r\n         * dictionary.\r\n         * @return {*} previous value associated with specified key, or undefined if\r\n         * there was no mapping for key.\r\n         */\r\n        remove(key: K): V {\r\n            var k = '$' + this.toStr(key);\r\n            var previousElement: IDictionaryPair<K, V> = this.table[k];\r\n            if (!collections.isUndefined(previousElement)) {\r\n                delete this.table[k];\r\n                this.nElements--;\r\n                return previousElement.value;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the keys in this dictionary.\r\n         * @return {Array} an array containing all of the keys in this dictionary.\r\n         */\r\n        keys(): K[] {\r\n            var array: K[] = [];\r\n            for (var name in this.table) {\r\n                if (has(this.table, name)) {\r\n                    var pair: IDictionaryPair<K, V> = this.table[name];\r\n                    array.push(pair.key);\r\n                }\r\n            }\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the values in this dictionary.\r\n         * @return {Array} an array containing all of the values in this dictionary.\r\n         */\r\n        values(): V[] {\r\n            var array: V[] = [];\r\n            for (var name in this.table) {\r\n                if (has(this.table, name)) {\r\n                    var pair: IDictionaryPair<K, V> = this.table[name];\r\n                    array.push(pair.value);\r\n                }\r\n            }\r\n            return array;\r\n        }\r\n\r\n        /**\r\n        * Executes the provided function once for each key-value pair \r\n        * present in this dictionary.\r\n        * @param {function(Object,Object):*} callback function to execute, it is\r\n        * invoked with two arguments: key and value. To break the iteration you can \r\n        * optionally return false.\r\n        */\r\n        forEach(callback: (key: K, value: V) => any): void {\r\n            for (var name in this.table) {\r\n                if (has(this.table, name)) {\r\n                    var pair: IDictionaryPair<K, V> = this.table[name];\r\n                    var ret = callback(pair.key, pair.value);\r\n                    if (ret === false) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns true if this dictionary contains a mapping for the specified key.\r\n         * @param {Object} key key whose presence in this dictionary is to be\r\n         * tested.\r\n         * @return {boolean} true if this dictionary contains a mapping for the\r\n         * specified key.\r\n         */\r\n        containsKey(key: K): boolean {\r\n            return !collections.isUndefined(this.getValue(key));\r\n        }\r\n\r\n        /**\r\n        * Removes all mappings from this dictionary.\r\n        * @this {collections.Dictionary}\r\n        */\r\n        clear() {\r\n            this.table = {};\r\n            this.nElements = 0;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of keys in this dictionary.\r\n         * @return {number} the number of key-value mappings in this dictionary.\r\n         */\r\n        size(): number {\r\n            return this.nElements;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this dictionary contains no mappings.\r\n         * @return {boolean} true if this dictionary contains no mappings.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.nElements <= 0;\r\n        }\r\n\r\n        toString(): string {\r\n            var toret = \"{\";\r\n            this.forEach((k, v) => {\r\n                toret = toret + \"\\n\\t\" + k.toString() + \" : \" + v.toString();\r\n            });\r\n            return toret + \"\\n}\";\r\n        }\r\n    } // End of dictionary\r\n\r\n    /**\r\n     * This class is used by the LinkedDictionary Internally\r\n     * Has to be a class, not an interface, because it needs to have \r\n     * the 'unlink' function defined.\r\n     */\r\n    class LinkedDictionaryPair<K, V> implements IDictionaryPair<K, V> {\r\n        prev: LinkedDictionaryPair<K, V>;\r\n        next: LinkedDictionaryPair<K, V>;\r\n\r\n        constructor(public key: K, public value: V) { }\r\n\r\n        unlink() {\r\n            this.prev.next = this.next;\r\n            this.next.prev = this.prev;\r\n        }\r\n    }\r\n\r\n    export class LinkedDictionary<K, V> extends Dictionary<K, V> {\r\n        private head: LinkedDictionaryPair<K, V>; // Head Identifier of the list.  holds no Key or Value\r\n        private tail: LinkedDictionaryPair<K, V>; // Tail Identifier of the list.  holds no Key or Value\r\n\r\n        constructor(toStrFunction?: (key: K) => string) {\r\n            super(toStrFunction);\r\n            this.head = new LinkedDictionaryPair (null, null);\r\n            this.tail = new LinkedDictionaryPair (null, null);\r\n            this.head.next = this.tail;\r\n            this.tail.prev = this.head;\r\n        }\r\n\r\n        /**\r\n         * Inserts the new node to the 'tail' of the list, updating the \r\n         * neighbors, and moving 'this.tail' (the End of List indicator) that\r\n         * to the end.\r\n         */\r\n        private appendToTail(entry: LinkedDictionaryPair<K, V>) {\r\n            var lastNode = this.tail.prev;\r\n            lastNode.next = entry;\r\n            entry.prev = lastNode;\r\n            entry.next = this.tail;\r\n            this.tail.prev = entry;\r\n        }\r\n\r\n        /**\r\n         * Retrieves a linked dictionary from the table internally\r\n         */\r\n        private getLinkedDictionaryPair(key: K): LinkedDictionaryPair<K, V> {\r\n            if (collections.isUndefined(key)) {\r\n                return undefined;\r\n            }\r\n            var k = '$' + this.toStr(key);\r\n            var pair = <LinkedDictionaryPair<K, V>>(this.table[k]);\r\n            return pair;\r\n        }\r\n\r\n        /**\r\n         * Returns the value to which this dictionary maps the specified key.\r\n         * Returns undefined if this dictionary contains no mapping for this key.\r\n         * @param {Object} key key whose associated value is to be returned.\r\n         * @return {*} the value to which this dictionary maps the specified key or\r\n         * undefined if the map contains no mapping for this key.\r\n         */\r\n        getValue(key: K): V {\r\n            var pair = this.getLinkedDictionaryPair(key);\r\n            if (!collections.isUndefined(pair)) {\r\n                return pair.value;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Removes the mapping for this key from this dictionary if it is present.\r\n         * Also, if a value is present for this key, the entry is removed from the \r\n         * insertion ordering.\r\n         * @param {Object} key key whose mapping is to be removed from the\r\n         * dictionary.\r\n         * @return {*} previous value associated with specified key, or undefined if\r\n         * there was no mapping for key.\r\n         */\r\n        remove(key: K): V {\r\n            var pair = this.getLinkedDictionaryPair(key);\r\n            if (!collections.isUndefined(pair)) {\r\n                super.remove(key); // This will remove it from the table\r\n                pair.unlink(); // This will unlink it from the chain\r\n                return pair.value;\r\n            }\r\n            return undefined;\r\n        } \r\n\r\n        /**\r\n        * Removes all mappings from this LinkedDictionary.\r\n        * @this {collections.LinkedDictionary}\r\n        */\r\n        clear() {\r\n            super.clear();\r\n            this.head.next = this.tail;\r\n            this.tail.prev = this.head;\r\n        }\r\n\r\n        /**\r\n         * Internal function used when updating an existing KeyValue pair.\r\n         * It places the new value indexed by key into the table, but maintains \r\n         * its place in the linked ordering.\r\n         */\r\n        private replace(oldPair: LinkedDictionaryPair<K, V>, newPair: LinkedDictionaryPair<K, V>) {\r\n            var k = '$' + this.toStr(newPair.key);\r\n\r\n            // set the new Pair's links to existingPair's links\r\n            newPair.next = oldPair.next;\r\n            newPair.prev = oldPair.prev;\r\n\r\n            // Delete Existing Pair from the table, unlink it from chain.\r\n            // As a result, the nElements gets decremented by this operation\r\n            this.remove(oldPair.key);\r\n\r\n            // Link new Pair in place of where oldPair was,\r\n            // by pointing the old pair's neighbors to it.\r\n            newPair.prev.next = newPair;\r\n            newPair.next.prev = newPair;\r\n\r\n            this.table[k] = newPair;\r\n\r\n            // To make up for the fact that the number of elements was decremented,\r\n            // We need to increase it by one.\r\n            ++this.nElements;\r\n\r\n        }\r\n\r\n        /**\r\n         * Associates the specified value with the specified key in this dictionary.\r\n         * If the dictionary previously contained a mapping for this key, the old\r\n         * value is replaced by the specified value.\r\n         * Updating of a key that already exists maintains its place in the \r\n         * insertion order into the map.\r\n         * @param {Object} key key with which the specified value is to be\r\n         * associated.\r\n         * @param {Object} value value to be associated with the specified key.\r\n         * @return {*} previous value associated with the specified key, or undefined if\r\n         * there was no mapping for the key or if the key/value are undefined.\r\n         */\r\n        setValue(key: K, value: V): V {\r\n\r\n            if (collections.isUndefined(key) || collections.isUndefined(value)) {\r\n                return undefined;\r\n            }\r\n\r\n            var existingPair = this.getLinkedDictionaryPair(key);\r\n            var newPair = new LinkedDictionaryPair<K, V>(key, value);\r\n\r\n            var k = '$' + this.toStr(key);\r\n\r\n            // If there is already an element for that key, we \r\n            // keep it's place in the LinkedList\r\n            if (!collections.isUndefined(existingPair)) {\r\n                this.replace(existingPair, newPair);\r\n\r\n                return existingPair.value;\r\n            } else {\r\n                this.appendToTail(newPair);\r\n                this.table[k] = newPair;\r\n                ++this.nElements;\r\n\r\n                return undefined;\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the keys in this LinkedDictionary, ordered\r\n         * by insertion order.\r\n         * @return {Array} an array containing all of the keys in this LinkedDictionary,\r\n         * ordered by insertion order.\r\n         */\r\n        keys(): K[] {\r\n            var array: K[] = [];\r\n            this.forEach((key, value) => {\r\n                array.push(key);\r\n            });\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the values in this LinkedDictionary, ordered by \r\n         * insertion order.\r\n         * @return {Array} an array containing all of the values in this LinkedDictionary,\r\n         * ordered by insertion order.\r\n         */\r\n        values(): V[] {\r\n            var array: V[] = [];\r\n            this.forEach((key, value) => {\r\n                array.push(value);\r\n            });\r\n            return array;\r\n        }\r\n\r\n        /**\r\n        * Executes the provided function once for each key-value pair \r\n        * present in this LinkedDictionary. It is done in the order of insertion\r\n        * into the LinkedDictionary\r\n        * @param {function(Object,Object):*} callback function to execute, it is\r\n        * invoked with two arguments: key and value. To break the iteration you can \r\n        * optionally return false.\r\n        */\r\n        forEach(callback: (key: K, value: V) => any): void {\r\n            var crawlNode = this.head.next;\r\n            while (crawlNode.next != null) {\r\n                var ret = callback(crawlNode.key, crawlNode.value);\r\n                if (ret === false) {\r\n                    return;\r\n                }\r\n                crawlNode = crawlNode.next;\r\n            }\r\n        }\r\n\r\n    } // End of LinkedDictionary\r\n    // /**\r\n    //  * Returns true if this dictionary is equal to the given dictionary.\r\n    //  * Two dictionaries are equal if they contain the same mappings.\r\n    //  * @param {collections.Dictionary} other the other dictionary.\r\n    //  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\r\n    //  * function used to check if two values are equal.\r\n    //  * @return {boolean} true if this dictionary is equal to the given dictionary.\r\n    //  */\r\n    // collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\r\n    // \tvar eqF = valuesEqualFunction || collections.defaultEquals;\r\n    // \tif(!(other instanceof collections.Dictionary)){\r\n    // \t\treturn false;\r\n    // \t}\r\n    // \tif(this.size() !== other.size()){\r\n    // \t\treturn false;\r\n    // \t}\r\n    // \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\r\n    // }\r\n\r\n    export class MultiDictionary<K, V> {\r\n\r\n        // Cannot do: \r\n        // class MultiDictionary<K,V> extends Dictionary<K,Array<V>> {\r\n        // Since we want to reuse the function name setValue and types in signature become incompatible \r\n        // Therefore we are using composition instead of inheritance\r\n        private dict: Dictionary<K, Array<V>>;\r\n        private equalsF: IEqualsFunction<V>;\r\n        private allowDuplicate: boolean;\r\n\r\n      /**\r\n       * Creates an empty multi dictionary.\r\n       * @class <p>A multi dictionary is a special kind of dictionary that holds\r\n       * multiple values against each key. Setting a value into the dictionary will\r\n       * add the value to an array at that key. Getting a key will return an array,\r\n       * holding all the values set to that key.\r\n       * You can configure to allow duplicates in the values.\r\n       * This implementation accepts any kind of objects as keys.</p>\r\n       *\r\n       * <p>If the keys are custom objects a function which converts keys to strings must be\r\n       * provided. Example:</p>\r\n       *\r\n       * <pre>\r\n       * function petToString(pet) {\r\n         *  return pet.name;\r\n         * }\r\n       * </pre>\r\n       * <p>If the values are custom objects a function to check equality between values\r\n       * must be provided. Example:</p>\r\n       *\r\n       * <pre>\r\n       * function petsAreEqualByAge(pet1,pet2) {\r\n         *  return pet1.age===pet2.age;\r\n         * }\r\n       * </pre>\r\n       * @constructor\r\n       * @param {function(Object):string=} toStrFunction optional function\r\n       * to convert keys to strings. If the keys aren't strings or if toString()\r\n       * is not appropriate, a custom function which receives a key and returns a\r\n       * unique string must be provided.\r\n       * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\r\n       * function to check if two values are equal.\r\n       *\r\n       * @param allowDuplicateValues\r\n       */\r\n        constructor(toStrFunction?: (key: K) => string, valuesEqualsFunction?: IEqualsFunction<V>, allowDuplicateValues = false) {\r\n            this.dict = new Dictionary<K, Array<V>>(toStrFunction);\r\n            this.equalsF = valuesEqualsFunction || collections.defaultEquals;\r\n            this.allowDuplicate = allowDuplicateValues;\r\n        }\r\n        /**\r\n        * Returns an array holding the values to which this dictionary maps\r\n        * the specified key.\r\n        * Returns an empty array if this dictionary contains no mappings for this key.\r\n        * @param {Object} key key whose associated values are to be returned.\r\n        * @return {Array} an array holding the values to which this dictionary maps\r\n        * the specified key.\r\n        */\r\n        getValue(key: K): V[] {\r\n            var values = this.dict.getValue(key);\r\n            if (collections.isUndefined(values)) {\r\n                return [];\r\n            }\r\n            return collections.arrays.copy(values);\r\n        }\r\n\r\n        /**\r\n         * Adds the value to the array associated with the specified key, if \r\n         * it is not already present.\r\n         * @param {Object} key key with which the specified value is to be\r\n         * associated.\r\n         * @param {Object} value the value to add to the array at the key\r\n         * @return {boolean} true if the value was not already associated with that key.\r\n         */\r\n        setValue(key: K, value: V): boolean {\r\n\r\n            if (collections.isUndefined(key) || collections.isUndefined(value)) {\r\n                return false;\r\n            }\r\n            if (!this.containsKey(key)) {\r\n                this.dict.setValue(key, [value]);\r\n                return true;\r\n            }\r\n            var array = this.dict.getValue(key);\r\n            if (!this.allowDuplicate) {\r\n                if (collections.arrays.contains(array, value, this.equalsF)) {\r\n                    return false;\r\n                }\r\n            }\r\n            array.push(value);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Removes the specified values from the array of values associated with the\r\n         * specified key. If a value isn't given, all values associated with the specified \r\n         * key are removed.\r\n         * @param {Object} key key whose mapping is to be removed from the\r\n         * dictionary.\r\n         * @param {Object=} value optional argument to specify the value to remove \r\n         * from the array associated with the specified key.\r\n         * @return {*} true if the dictionary changed, false if the key doesn't exist or \r\n         * if the specified value isn't associated with the specified key.\r\n         */\r\n        remove(key: K, value?: V): boolean {\r\n            if (collections.isUndefined(value)) {\r\n                var v = this.dict.remove(key);\r\n                return !collections.isUndefined(v);\r\n            }\r\n            var array = this.dict.getValue(key);\r\n            if (collections.arrays.remove(array, value, this.equalsF)) {\r\n                if (array.length === 0) {\r\n                    this.dict.remove(key);\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the keys in this dictionary.\r\n         * @return {Array} an array containing all of the keys in this dictionary.\r\n         */\r\n        keys(): K[] {\r\n            return this.dict.keys();\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the values in this dictionary.\r\n         * @return {Array} an array containing all of the values in this dictionary.\r\n         */\r\n        values(): V[] {\r\n            var values = this.dict.values();\r\n            var array:Array<V> = [];\r\n            for (var i = 0; i < values.length; i++) {\r\n                var v = values[i];\r\n                for (var j = 0; j < v.length; j++) {\r\n                    array.push(v[j]);\r\n                }\r\n            }\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this dictionary at least one value associatted the specified key.\r\n         * @param {Object} key key whose presence in this dictionary is to be\r\n         * tested.\r\n         * @return {boolean} true if this dictionary at least one value associatted \r\n         * the specified key.\r\n         */\r\n        containsKey(key: K): boolean {\r\n            return this.dict.containsKey(key);\r\n        }\r\n\r\n        /**\r\n         * Removes all mappings from this dictionary.\r\n         */\r\n        clear(): void {\r\n            this.dict.clear();\r\n        }\r\n\r\n        /**\r\n         * Returns the number of keys in this dictionary.\r\n         * @return {number} the number of key-value mappings in this dictionary.\r\n         */\r\n        size(): number {\r\n            return this.dict.size();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this dictionary contains no mappings.\r\n         * @return {boolean} true if this dictionary contains no mappings.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.dict.isEmpty();\r\n        }\r\n    }// end of multi dictionary \r\n\r\n    export class Heap<T> {\r\n        /**\r\n         * Array used to store the elements od the heap.\r\n         * @type {Array.<Object>}\r\n         * @private\r\n         */\r\n        private data: T[] = [];\r\n        /**\r\n         * Function used to compare elements.\r\n         * @type {function(Object,Object):number}\r\n         * @private\r\n         */\r\n        private compare: ICompareFunction<T>;\r\n        /**\r\n         * Creates an empty Heap.\r\n         * @class \r\n         * <p>A heap is a binary tree, where the nodes maintain the heap property: \r\n         * each node is smaller than each of its children and therefore a MinHeap \r\n         * This implementation uses an array to store elements.</p>\r\n         * <p>If the inserted elements are custom objects a compare function must be provided, \r\n         *  at construction time, otherwise the <=, === and >= operators are \r\n         * used to compare elements. Example:</p>\r\n         *\r\n         * <pre>\r\n         * function compare(a, b) {\r\n         *  if (a is less than b by some ordering criterion) {\r\n         *     return -1;\r\n         *  } if (a is greater than b by the ordering criterion) {\r\n         *     return 1;\r\n         *  } \r\n         *  // a must be equal to b\r\n         *  return 0;\r\n         * }\r\n         * </pre>\r\n         *\r\n         * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\r\n         * reverse compare function to accomplish that behavior. Example:</p>\r\n         *\r\n         * <pre>\r\n         * function reverseCompare(a, b) {\r\n         *  if (a is less than b by some ordering criterion) {\r\n         *     return 1;\r\n         *  } if (a is greater than b by the ordering criterion) {\r\n         *     return -1;\r\n         *  } \r\n         *  // a must be equal to b\r\n         *  return 0;\r\n         * }\r\n         * </pre>\r\n         *\r\n         * @constructor\r\n         * @param {function(Object,Object):number=} compareFunction optional\r\n         * function used to compare two elements. Must return a negative integer,\r\n         * zero, or a positive integer as the first argument is less than, equal to,\r\n         * or greater than the second.\r\n         */\r\n        constructor(compareFunction?: ICompareFunction<T>) {\r\n            this.compare = compareFunction || collections.defaultCompare;\r\n        }\r\n\r\n        /**\r\n         * Returns the index of the left child of the node at the given index.\r\n         * @param {number} nodeIndex The index of the node to get the left child\r\n         * for.\r\n         * @return {number} The index of the left child.\r\n         * @private\r\n         */\r\n        private leftChildIndex(nodeIndex: number): number {\r\n            return (2 * nodeIndex) + 1;\r\n        }\r\n        /**\r\n         * Returns the index of the right child of the node at the given index.\r\n         * @param {number} nodeIndex The index of the node to get the right child\r\n         * for.\r\n         * @return {number} The index of the right child.\r\n         * @private\r\n         */\r\n        private rightChildIndex(nodeIndex: number): number {\r\n            return (2 * nodeIndex) + 2;\r\n        }\r\n        /**\r\n         * Returns the index of the parent of the node at the given index.\r\n         * @param {number} nodeIndex The index of the node to get the parent for.\r\n         * @return {number} The index of the parent.\r\n         * @private\r\n         */\r\n        private parentIndex(nodeIndex: number): number {\r\n            return Math.floor((nodeIndex - 1) / 2);\r\n        }\r\n        /**\r\n         * Returns the index of the smaller child node (if it exists).\r\n         * @param {number} leftChild left child index.\r\n         * @param {number} rightChild right child index.\r\n         * @return {number} the index with the minimum value or -1 if it doesn't\r\n         * exists.\r\n         * @private\r\n         */\r\n        private minIndex(leftChild: number, rightChild: number): number {\r\n\r\n            if (rightChild >= this.data.length) {\r\n                if (leftChild >= this.data.length) {\r\n                    return -1;\r\n                } else {\r\n                    return leftChild;\r\n                }\r\n            } else {\r\n                if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\r\n                    return leftChild;\r\n                } else {\r\n                    return rightChild;\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Moves the node at the given index up to its proper place in the heap.\r\n         * @param {number} index The index of the node to move up.\r\n         * @private\r\n         */\r\n        private siftUp(index: number): void {\r\n\r\n            var parent = this.parentIndex(index);\r\n            while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\r\n                collections.arrays.swap(this.data, parent, index);\r\n                index = parent;\r\n                parent = this.parentIndex(index);\r\n            }\r\n        }\r\n        /**\r\n         * Moves the node at the given index down to its proper place in the heap.\r\n         * @param {number} nodeIndex The index of the node to move down.\r\n         * @private\r\n         */\r\n        private siftDown(nodeIndex: number): void {\r\n\r\n            //smaller child index\r\n            var min = this.minIndex(this.leftChildIndex(nodeIndex),\r\n                this.rightChildIndex(nodeIndex));\r\n\r\n            while (min >= 0 && this.compare(this.data[nodeIndex],\r\n                this.data[min]) > 0) {\r\n                collections.arrays.swap(this.data, min, nodeIndex);\r\n                nodeIndex = min;\r\n                min = this.minIndex(this.leftChildIndex(nodeIndex),\r\n                    this.rightChildIndex(nodeIndex));\r\n            }\r\n        }\r\n        /**\r\n         * Retrieves but does not remove the root element of this heap.\r\n         * @return {*} The value at the root of the heap. Returns undefined if the\r\n         * heap is empty.\r\n         */\r\n        peek(): T {\r\n\r\n            if (this.data.length > 0) {\r\n                return this.data[0];\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n        /**\r\n         * Adds the given element into the heap.\r\n         * @param {*} element the element.\r\n         * @return true if the element was added or fals if it is undefined.\r\n         */\r\n        add(element: T): boolean {\r\n            if (collections.isUndefined(element)) {\r\n                return undefined;\r\n            }\r\n            this.data.push(element);\r\n            this.siftUp(this.data.length - 1);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Retrieves and removes the root element of this heap.\r\n         * @return {*} The value removed from the root of the heap. Returns\r\n         * undefined if the heap is empty.\r\n         */\r\n        removeRoot(): T {\r\n\r\n            if (this.data.length > 0) {\r\n                var obj = this.data[0];\r\n                this.data[0] = this.data[this.data.length - 1];\r\n                this.data.splice(this.data.length - 1, 1);\r\n                if (this.data.length > 0) {\r\n                    this.siftDown(0);\r\n                }\r\n                return obj;\r\n            }\r\n            return undefined;\r\n        }\r\n        /**\r\n         * Returns true if this heap contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this Heap contains the specified element, false\r\n         * otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            var equF = collections.compareToEquals(this.compare);\r\n            return collections.arrays.contains(this.data, element, equF);\r\n        }\r\n        /**\r\n         * Returns the number of elements in this heap.\r\n         * @return {number} the number of elements in this heap.\r\n         */\r\n        size(): number {\r\n            return this.data.length;\r\n        }\r\n        /**\r\n         * Checks if this heap is empty.\r\n         * @return {boolean} true if and only if this heap contains no items; false\r\n         * otherwise.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.data.length <= 0;\r\n        }\r\n        /**\r\n         * Removes all of the elements from this heap.\r\n         */\r\n        clear(): void {\r\n            this.data.length = 0;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this heap in \r\n         * no particular order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            collections.arrays.forEach(this.data, callback);\r\n        }\r\n    }\r\n\r\n    export class Stack<T> {\r\n        /**\r\n         * List containing the elements.\r\n         * @type collections.LinkedList\r\n         * @private\r\n         */\r\n        private list: LinkedList<T>;\r\n        /**\r\n         * Creates an empty Stack.\r\n         * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\r\n         * element added to the stack will be the first one to be removed. This\r\n         * implementation uses a linked list as a container.\r\n         * @constructor\r\n         */\r\n        constructor() {\r\n            this.list = new LinkedList<T>();\r\n        }\r\n\r\n        /**\r\n         * Pushes an item onto the top of this stack.\r\n         * @param {Object} elem the element to be pushed onto this stack.\r\n         * @return {boolean} true if the element was pushed or false if it is undefined.\r\n         */\r\n        push(elem: T) {\r\n            return this.list.add(elem, 0);\r\n        }\r\n        /**\r\n         * Pushes an item onto the top of this stack.\r\n         * @param {Object} elem the element to be pushed onto this stack.\r\n         * @return {boolean} true if the element was pushed or false if it is undefined.\r\n         */\r\n        add(elem: T) {\r\n            return this.list.add(elem, 0);\r\n        }\r\n        /**\r\n         * Removes the object at the top of this stack and returns that object.\r\n         * @return {*} the object at the top of this stack or undefined if the\r\n         * stack is empty.\r\n         */\r\n        pop(): T {\r\n            return this.list.removeElementAtIndex(0);\r\n        }\r\n        /**\r\n         * Looks at the object at the top of this stack without removing it from the\r\n         * stack.\r\n         * @return {*} the object at the top of this stack or undefined if the\r\n         * stack is empty.\r\n         */\r\n        peek(): T {\r\n            return this.list.first();\r\n        }\r\n        /**\r\n         * Returns the number of elements in this stack.\r\n         * @return {number} the number of elements in this stack.\r\n         */\r\n        size(): number {\r\n            return this.list.size();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this stack contains the specified element.\r\n         * <p>If the elements inside this stack are\r\n         * not comparable with the === operator, a custom equals function should be\r\n         * provided to perform searches, the function must receive two arguments and\r\n         * return true if they are equal, false otherwise. Example:</p>\r\n         *\r\n         * <pre>\r\n         * var petsAreEqualByName (pet1, pet2) {\r\n         *  return pet1.name === pet2.name;\r\n         * }\r\n         * </pre>\r\n         * @param {Object} elem element to search for.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional\r\n         * function to check if two elements are equal.\r\n         * @return {boolean} true if this stack contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(elem: T, equalsFunction?: IEqualsFunction<T>) {\r\n            return this.list.contains(elem, equalsFunction);\r\n        }\r\n        /**\r\n         * Checks if this stack is empty.\r\n         * @return {boolean} true if and only if this stack contains no items; false\r\n         * otherwise.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.list.isEmpty();\r\n        }\r\n        /**\r\n         * Removes all of the elements from this stack.\r\n         */\r\n        clear(): void {\r\n            this.list.clear();\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this stack in \r\n         * LIFO order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            this.list.forEach(callback);\r\n        }\r\n    } // End of stack \r\n\r\n\r\n\r\n    export class Queue<T>{\r\n\r\n        /**\r\n         * List containing the elements.\r\n         * @type collections.LinkedList\r\n         * @private\r\n         */\r\n        private list: LinkedList<T>;\r\n\r\n        /**\r\n         * Creates an empty queue.\r\n         * @class A queue is a First-In-First-Out (FIFO) data structure, the first\r\n         * element added to the queue will be the first one to be removed. This\r\n         * implementation uses a linked list as a container.\r\n         * @constructor\r\n         */\r\n        constructor() {\r\n            this.list = new LinkedList<T>();\r\n        }\r\n\r\n\r\n        /**\r\n         * Inserts the specified element into the end of this queue.\r\n         * @param {Object} elem the element to insert.\r\n         * @return {boolean} true if the element was inserted, or false if it is undefined.\r\n         */\r\n        enqueue(elem: T): boolean {\r\n            return this.list.add(elem);\r\n        }\r\n        /**\r\n         * Inserts the specified element into the end of this queue.\r\n         * @param {Object} elem the element to insert.\r\n         * @return {boolean} true if the element was inserted, or false if it is undefined.\r\n         */\r\n        add(elem: T): boolean {\r\n            return this.list.add(elem);\r\n        }\r\n        /**\r\n         * Retrieves and removes the head of this queue.\r\n         * @return {*} the head of this queue, or undefined if this queue is empty.\r\n         */\r\n        dequeue(): T {\r\n            if (this.list.size() !== 0) {\r\n                var el = this.list.first();\r\n                this.list.removeElementAtIndex(0);\r\n                return el;\r\n            }\r\n            return undefined;\r\n        }\r\n        /**\r\n         * Retrieves, but does not remove, the head of this queue.\r\n         * @return {*} the head of this queue, or undefined if this queue is empty.\r\n         */\r\n        peek(): T {\r\n\r\n            if (this.list.size() !== 0) {\r\n                return this.list.first();\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this queue.\r\n         * @return {number} the number of elements in this queue.\r\n         */\r\n        size(): number {\r\n            return this.list.size();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this queue contains the specified element.\r\n         * <p>If the elements inside this stack are\r\n         * not comparable with the === operator, a custom equals function should be\r\n         * provided to perform searches, the function must receive two arguments and\r\n         * return true if they are equal, false otherwise. Example:</p>\r\n         *\r\n         * <pre>\r\n         * var petsAreEqualByName (pet1, pet2) {\r\n         *  return pet1.name === pet2.name;\r\n         * }\r\n         * </pre>\r\n         * @param {Object} elem element to search for.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional\r\n         * function to check if two elements are equal.\r\n         * @return {boolean} true if this queue contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(elem: T, equalsFunction?: IEqualsFunction<T>): boolean {\r\n            return this.list.contains(elem, equalsFunction);\r\n        }\r\n\r\n        /**\r\n         * Checks if this queue is empty.\r\n         * @return {boolean} true if and only if this queue contains no items; false\r\n         * otherwise.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.list.size() <= 0;\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this queue.\r\n         */\r\n        clear(): void {\r\n            this.list.clear();\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this queue in \r\n         * FIFO order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            this.list.forEach(callback);\r\n        }\r\n\r\n    } // End of queue\r\n\r\n\r\n    export class PriorityQueue<T> {\r\n\r\n        private heap: Heap<T>;\r\n        /**\r\n         * Creates an empty priority queue.\r\n         * @class <p>In a priority queue each element is associated with a \"priority\",\r\n         * elements are dequeued in highest-priority-first order (the elements with the \r\n         * highest priority are dequeued first). Priority Queues are implemented as heaps. \r\n         * If the inserted elements are custom objects a compare function must be provided, \r\n         * otherwise the <=, === and >= operators are used to compare object priority.</p>\r\n         * <pre>\r\n         * function compare(a, b) {\r\n         *  if (a is less than b by some ordering criterion) {\r\n         *     return -1;\r\n         *  } if (a is greater than b by the ordering criterion) {\r\n         *     return 1;\r\n         *  } \r\n         *  // a must be equal to b\r\n         *  return 0;\r\n         * }\r\n         * </pre>\r\n         * @constructor\r\n         * @param {function(Object,Object):number=} compareFunction optional\r\n         * function used to compare two element priorities. Must return a negative integer,\r\n         * zero, or a positive integer as the first argument is less than, equal to,\r\n         * or greater than the second.\r\n         */\r\n        constructor(compareFunction?: ICompareFunction<T>) {\r\n            this.heap = new Heap<T>(collections.reverseCompareFunction(compareFunction));\r\n        }\r\n\r\n        /**\r\n         * Inserts the specified element into this priority queue.\r\n         * @param {Object} element the element to insert.\r\n         * @return {boolean} true if the element was inserted, or false if it is undefined.\r\n         */\r\n        enqueue(element: T): boolean {\r\n            return this.heap.add(element);\r\n        }\r\n\r\n        /**\r\n         * Inserts the specified element into this priority queue.\r\n         * @param {Object} element the element to insert.\r\n         * @return {boolean} true if the element was inserted, or false if it is undefined.\r\n         */\r\n        add(element: T): boolean {\r\n            return this.heap.add(element);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and removes the highest priority element of this queue.\r\n         * @return {*} the the highest priority element of this queue, \r\n         *  or undefined if this queue is empty.\r\n         */\r\n        dequeue(): T {\r\n            if (this.heap.size() !== 0) {\r\n                var el = this.heap.peek();\r\n                this.heap.removeRoot();\r\n                return el;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Retrieves, but does not remove, the highest priority element of this queue.\r\n         * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\r\n         */\r\n        peek(): T {\r\n            return this.heap.peek();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this priority queue contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this priority queue contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            return this.heap.contains(element);\r\n        }\r\n\r\n        /**\r\n         * Checks if this priority queue is empty.\r\n         * @return {boolean} true if and only if this priority queue contains no items; false\r\n         * otherwise.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.heap.isEmpty();\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this priority queue.\r\n         * @return {number} the number of elements in this priority queue.\r\n         */\r\n        size(): number {\r\n            return this.heap.size();\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this priority queue.\r\n         */\r\n        clear(): void {\r\n            this.heap.clear();\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this queue in \r\n         * no particular order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            this.heap.forEach(callback);\r\n        }\r\n\r\n    } // end of priority queue\r\n\r\n\r\n\r\n\r\n    export class Set<T>{\r\n        private dictionary: Dictionary<T, any>;\r\n\r\n        /**\r\n         * Creates an empty set.\r\n         * @class <p>A set is a data structure that contains no duplicate items.</p>\r\n         * <p>If the inserted elements are custom objects a function \r\n         * which converts elements to strings must be provided. Example:</p>\r\n         *\r\n         * <pre>\r\n         * function petToString(pet) {\r\n         *  return pet.name;\r\n         * }\r\n         * </pre>\r\n         *\r\n         * @constructor\r\n         * @param {function(Object):string=} toStringFunction optional function used\r\n         * to convert elements to strings. If the elements aren't strings or if toString()\r\n         * is not appropriate, a custom function which receives a onject and returns a\r\n         * unique string must be provided.\r\n         */\r\n        constructor(toStringFunction?: (item: T) => string) {\r\n            this.dictionary = new Dictionary<T, any>(toStringFunction);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Returns true if this set contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this set contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            return this.dictionary.containsKey(element);\r\n        }\r\n\r\n        /**\r\n         * Adds the specified element to this set if it is not already present.\r\n         * @param {Object} element the element to insert.\r\n         * @return {boolean} true if this set did not already contain the specified element.\r\n         */\r\n        add(element: T): boolean {\r\n            if (this.contains(element) || collections.isUndefined(element)) {\r\n                return false;\r\n            } else {\r\n                this.dictionary.setValue(element, element);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Performs an intersecion between this an another set.\r\n         * Removes all values that are not present this set and the given set.\r\n         * @param {collections.Set} otherSet other set.\r\n         */\r\n        intersection(otherSet: Set<T>): void {\r\n            var set = this;\r\n            this.forEach(function (element: T): boolean {\r\n                if (!otherSet.contains(element)) {\r\n                    set.remove(element);\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Performs a union between this an another set.\r\n         * Adds all values from the given set to this set.\r\n         * @param {collections.Set} otherSet other set.\r\n         */\r\n        union(otherSet: Set<T>): void {\r\n            var set = this;\r\n            otherSet.forEach(function (element: T): boolean {\r\n                set.add(element);\r\n                return true;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Performs a difference between this an another set.\r\n         * Removes from this set all the values that are present in the given set.\r\n         * @param {collections.Set} otherSet other set.\r\n         */\r\n        difference(otherSet: Set<T>): void {\r\n            var set = this;\r\n            otherSet.forEach(function (element: T): boolean {\r\n                set.remove(element);\r\n                return true;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Checks whether the given set contains all the elements in this set.\r\n         * @param {collections.Set} otherSet other set.\r\n         * @return {boolean} true if this set is a subset of the given set.\r\n         */\r\n        isSubsetOf(otherSet: Set<T>): boolean {\r\n\r\n            if (this.size() > otherSet.size()) {\r\n                return false;\r\n            }\r\n\r\n            var isSub = true;\r\n            this.forEach(function (element) {\r\n                if (!otherSet.contains(element)) {\r\n                    isSub = false;\r\n                    return false;\r\n                }\r\n            return true;\r\n            });\r\n            return isSub;\r\n        }\r\n\r\n        /**\r\n         * Removes the specified element from this set if it is present.\r\n         * @return {boolean} true if this set contained the specified element.\r\n         */\r\n        remove(element: T): boolean {\r\n            if (!this.contains(element)) {\r\n                return false;\r\n            } else {\r\n                this.dictionary.remove(element);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element \r\n         * present in this set.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one arguments: the element. To break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>): void {\r\n            this.dictionary.forEach(function (k, v) {\r\n                return callback(v);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the elements in this set in arbitrary order.\r\n         * @return {Array} an array containing all of the elements in this set.\r\n         */\r\n        toArray(): T[] {\r\n            return this.dictionary.values();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this set contains no elements.\r\n         * @return {boolean} true if this set contains no elements.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.dictionary.isEmpty();\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this set.\r\n         * @return {number} the number of elements in this set.\r\n         */\r\n        size(): number {\r\n            return this.dictionary.size();\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this set.\r\n         */\r\n        clear(): void {\r\n            this.dictionary.clear();\r\n        }\r\n\r\n        /*\r\n        * Provides a string representation for display\r\n        */\r\n        toString(): string {\r\n            return collections.arrays.toString(this.toArray());\r\n        }\r\n    }// end of Set\r\n\r\n    export class Bag<T>{\r\n\r\n        private toStrF: (item: T) => string;\r\n        private dictionary: Dictionary<T, any>;\r\n        private nElements: number;\r\n\r\n        /**\r\n         * Creates an empty bag.\r\n         * @class <p>A bag is a special kind of set in which members are \r\n         * allowed to appear more than once.</p>\r\n         * <p>If the inserted elements are custom objects a function \r\n         * which converts elements to unique strings must be provided. Example:</p>\r\n         *\r\n         * <pre>\r\n         * function petToString(pet) {\r\n         *  return pet.name;\r\n         * }\r\n         * </pre>\r\n         *\r\n         * @constructor\r\n         * @param {function(Object):string=} toStrFunction optional function used\r\n         * to convert elements to strings. If the elements aren't strings or if toString()\r\n         * is not appropriate, a custom function which receives an object and returns a\r\n         * unique string must be provided.\r\n         */\r\n        constructor(toStrFunction?: (item: T) => string) {\r\n            this.toStrF = toStrFunction || collections.defaultToString;\r\n            this.dictionary = new Dictionary<T, any>(this.toStrF);\r\n            this.nElements = 0;\r\n        }\r\n\r\n\r\n        /**\r\n        * Adds nCopies of the specified object to this bag.\r\n        * @param {Object} element element to add.\r\n        * @param {number=} nCopies the number of copies to add, if this argument is\r\n        * undefined 1 copy is added.\r\n        * @return {boolean} true unless element is undefined.\r\n        */\r\n        add(element: T, nCopies: number= 1): boolean {\r\n\r\n            if (collections.isUndefined(element) || nCopies <= 0) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.contains(element)) {\r\n                var node = {\r\n                    value: element,\r\n                    copies: nCopies\r\n                };\r\n                this.dictionary.setValue(element, node);\r\n            } else {\r\n                this.dictionary.getValue(element).copies += nCopies;\r\n            }\r\n            this.nElements += nCopies;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * Counts the number of copies of the specified object in this bag.\r\n        * @param {Object} element the object to search for..\r\n        * @return {number} the number of copies of the object, 0 if not found\r\n        */\r\n        count(element: T): number {\r\n\r\n            if (!this.contains(element)) {\r\n                return 0;\r\n            } else {\r\n                return this.dictionary.getValue(element).copies;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns true if this bag contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this bag contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            return this.dictionary.containsKey(element);\r\n        }\r\n\r\n        /**\r\n        * Removes nCopies of the specified object to this bag.\r\n        * If the number of copies to remove is greater than the actual number \r\n        * of copies in the Bag, all copies are removed. \r\n        * @param {Object} element element to remove.\r\n        * @param {number=} nCopies the number of copies to remove, if this argument is\r\n        * undefined 1 copy is removed.\r\n        * @return {boolean} true if at least 1 element was removed.\r\n        */\r\n        remove(element: T, nCopies: number = 1) {\r\n\r\n            if (collections.isUndefined(element) || nCopies <= 0) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.contains(element)) {\r\n                return false;\r\n            } else {\r\n                var node = this.dictionary.getValue(element);\r\n                if (nCopies > node.copies) {\r\n                    this.nElements -= node.copies;\r\n                } else {\r\n                    this.nElements -= nCopies;\r\n                }\r\n                node.copies -= nCopies;\r\n                if (node.copies <= 0) {\r\n                    this.dictionary.remove(element);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the elements in this big in arbitrary order, \r\n         * including multiple copies.\r\n         * @return {Array} an array containing all of the elements in this bag.\r\n         */\r\n        toArray(): T[] {\r\n            var a:Array<T> = [];\r\n            var values = this.dictionary.values();\r\n            var vl = values.length;\r\n            for (var i = 0; i < vl; i++) {\r\n                var node = values[i];\r\n                var element = node.value;\r\n                var copies = node.copies;\r\n                for (var j = 0; j < copies; j++) {\r\n                    a.push(element);\r\n                }\r\n            }\r\n            return a;\r\n        }\r\n\r\n        /**\r\n         * Returns a set of unique elements in this bag. \r\n         * @return {collections.Set<T>} a set of unique elements in this bag.\r\n         */\r\n        toSet(): Set<T> {\r\n            var toret = new Set<T>(this.toStrF);\r\n            var elements = this.dictionary.values();\r\n            var l = elements.length;\r\n            for (var i = 0; i < l; i++) {\r\n                var value = elements[i].value;\r\n                toret.add(value);\r\n            }\r\n            return toret;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element \r\n         * present in this bag, including multiple copies.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element. To break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            this.dictionary.forEach(function (k, v) {\r\n                var value = v.value;\r\n                var copies = v.copies;\r\n                for (var i = 0; i < copies; i++) {\r\n                    if (callback(value) === false) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        /**\r\n         * Returns the number of elements in this bag.\r\n         * @return {number} the number of elements in this bag.\r\n         */\r\n        size(): number {\r\n            return this.nElements;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this bag contains no elements.\r\n         * @return {boolean} true if this bag contains no elements.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.nElements === 0;\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this bag.\r\n         */\r\n        clear(): void {\r\n            this.nElements = 0;\r\n            this.dictionary.clear();\r\n        }\r\n\r\n    }// End of bag \r\n\r\n\r\n    // Internal interface for BST \r\n    interface BSTreeNode<T>{\r\n        element: T;\r\n        leftCh: BSTreeNode<T>;\r\n        rightCh: BSTreeNode<T>;\r\n        parent: BSTreeNode<T>;\r\n    }\r\n    export class BSTree<T> {\r\n\r\n        private root: BSTreeNode<T>;\r\n        private compare: ICompareFunction<T>;\r\n        private nElements: number;\r\n        /**\r\n         * Creates an empty binary search tree.\r\n         * @class <p>A binary search tree is a binary tree in which each \r\n         * internal node stores an element such that the elements stored in the \r\n         * left subtree are less than it and the elements \r\n         * stored in the right subtree are greater.</p>\r\n         * <p>Formally, a binary search tree is a node-based binary tree data structure which \r\n         * has the following properties:</p>\r\n         * <ul>\r\n         * <li>The left subtree of a node contains only nodes with elements less \r\n         * than the node's element</li>\r\n         * <li>The right subtree of a node contains only nodes with elements greater \r\n         * than the node's element</li>\r\n         * <li>Both the left and right subtrees must also be binary search trees.</li>\r\n         * </ul>\r\n         * <p>If the inserted elements are custom objects a compare function must \r\n         * be provided at construction time, otherwise the <=, === and >= operators are \r\n         * used to compare elements. Example:</p>\r\n         * <pre>\r\n         * function compare(a, b) {\r\n         *  if (a is less than b by some ordering criterion) {\r\n         *     return -1;\r\n         *  } if (a is greater than b by the ordering criterion) {\r\n         *     return 1;\r\n         *  } \r\n         *  // a must be equal to b\r\n         *  return 0;\r\n         * }\r\n         * </pre>\r\n         * @constructor\r\n         * @param {function(Object,Object):number=} compareFunction optional\r\n         * function used to compare two elements. Must return a negative integer,\r\n         * zero, or a positive integer as the first argument is less than, equal to,\r\n         * or greater than the second.\r\n         */\r\n        constructor(compareFunction?: ICompareFunction<T>) {\r\n            this.root = null;\r\n            this.compare = compareFunction || collections.defaultCompare;\r\n            this.nElements = 0;\r\n        }\r\n\r\n        /**\r\n         * Adds the specified element to this tree if it is not already present.\r\n         * @param {Object} element the element to insert.\r\n         * @return {boolean} true if this tree did not already contain the specified element.\r\n         */\r\n        add(element: T): boolean {\r\n            if (collections.isUndefined(element)) {\r\n                return false;\r\n            }\r\n\r\n            if (this.insertNode(this.createNode(element)) !== null) {\r\n                this.nElements++;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this tree.\r\n         */\r\n        clear(): void {\r\n            this.root = null;\r\n            this.nElements = 0;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this tree contains no elements.\r\n         * @return {boolean} true if this tree contains no elements.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.nElements === 0;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this tree.\r\n         * @return {number} the number of elements in this tree.\r\n         */\r\n        size(): number {\r\n            return this.nElements;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this tree contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this tree contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            if (collections.isUndefined(element)) {\r\n                return false;\r\n            }\r\n            return this.searchNode(this.root, element) !== null;\r\n        }\r\n\r\n        /**\r\n         * Removes the specified element from this tree if it is present.\r\n         * @return {boolean} true if this tree contained the specified element.\r\n         */\r\n        remove(element: T): boolean {\r\n            var node = this.searchNode(this.root, element);\r\n            if (node === null) {\r\n                return false;\r\n            }\r\n            this.removeNode(node);\r\n            this.nElements--;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in \r\n         * in-order.\r\n         * @param {function(Object):*} callback function to execute, it is invoked with one \r\n         * argument: the element value, to break the iteration you can optionally return false.\r\n         */\r\n        inorderTraversal(callback: ILoopFunction<T>): void {\r\n            this.inorderTraversalAux(this.root, callback, {\r\n                stop: false\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in pre-order.\r\n         * @param {function(Object):*} callback function to execute, it is invoked with one \r\n         * argument: the element value, to break the iteration you can optionally return false.\r\n         */\r\n        preorderTraversal(callback: ILoopFunction<T>): void {\r\n            this.preorderTraversalAux(this.root, callback, {\r\n                stop: false\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in post-order.\r\n         * @param {function(Object):*} callback function to execute, it is invoked with one \r\n         * argument: the element value, to break the iteration you can optionally return false.\r\n         */\r\n        postorderTraversal(callback: ILoopFunction<T>): void {\r\n            this.postorderTraversalAux(this.root, callback, {\r\n                stop: false\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in \r\n         * level-order.\r\n         * @param {function(Object):*} callback function to execute, it is invoked with one \r\n         * argument: the element value, to break the iteration you can optionally return false.\r\n         */\r\n        levelTraversal(callback: ILoopFunction<T>): void {\r\n            this.levelTraversalAux(this.root, callback);\r\n        }\r\n\r\n        /**\r\n         * Returns the minimum element of this tree.\r\n         * @return {*} the minimum element of this tree or undefined if this tree is\r\n         * is empty.\r\n         */\r\n        minimum(): T {\r\n            if (this.isEmpty()) {\r\n                return undefined;\r\n            }\r\n            return this.minimumAux(this.root).element;\r\n        }\r\n\r\n        /**\r\n         * Returns the maximum element of this tree.\r\n         * @return {*} the maximum element of this tree or undefined if this tree is\r\n         * is empty.\r\n         */\r\n        maximum(): T {\r\n            if (this.isEmpty()) {\r\n                return undefined;\r\n            }\r\n            return this.maximumAux(this.root).element;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in inorder.\r\n         * Equivalent to inorderTraversal.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>): void {\r\n            this.inorderTraversal(callback);\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the elements in this tree in in-order.\r\n         * @return {Array} an array containing all of the elements in this tree in in-order.\r\n         */\r\n        toArray(): T[] {\r\n            var array: Array<T> = [];\r\n            this.inorderTraversal(function (element: T): boolean {\r\n                array.push(element);\r\n                return true;\r\n            });\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns the height of this tree.\r\n         * @return {number} the height of this tree or -1 if is empty.\r\n         */\r\n        height(): number {\r\n            return this.heightAux(this.root);\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private searchNode(node: BSTreeNode<T>, element: T): BSTreeNode<T> {\r\n            var cmp:number = null;\r\n            while (node !== null && cmp !== 0) {\r\n                cmp = this.compare(element, node.element);\r\n                if (cmp < 0) {\r\n                    node = node.leftCh;\r\n                } else if (cmp > 0) {\r\n                    node = node.rightCh;\r\n                }\r\n            }\r\n            return node;\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private transplant(n1: BSTreeNode<T>, n2: BSTreeNode<T>): void {\r\n            if (n1.parent === null) {\r\n                this.root = n2;\r\n            } else if (n1 === n1.parent.leftCh) {\r\n                n1.parent.leftCh = n2;\r\n            } else {\r\n                n1.parent.rightCh = n2;\r\n            }\r\n            if (n2 !== null) {\r\n                n2.parent = n1.parent;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private removeNode(node: BSTreeNode<T>): void {\r\n            if (node.leftCh === null) {\r\n                this.transplant(node, node.rightCh);\r\n            } else if (node.rightCh === null) {\r\n                this.transplant(node, node.leftCh);\r\n            } else {\r\n                var y = this.minimumAux(node.rightCh);\r\n                if (y.parent !== node) {\r\n                    this.transplant(y, y.rightCh);\r\n                    y.rightCh = node.rightCh;\r\n                    y.rightCh.parent = y;\r\n                }\r\n                this.transplant(node, y);\r\n                y.leftCh = node.leftCh;\r\n                y.leftCh.parent = y;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private inorderTraversalAux(node: BSTreeNode<T>, callback: ILoopFunction<T>, signal: { stop: boolean; }): void {\r\n            if (node === null || signal.stop) {\r\n                return;\r\n            }\r\n            this.inorderTraversalAux(node.leftCh, callback, signal);\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            signal.stop = callback(node.element) === false;\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            this.inorderTraversalAux(node.rightCh, callback, signal);\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private levelTraversalAux(node: BSTreeNode<T>, callback: ILoopFunction<T>) {\r\n            var queue = new Queue<BSTreeNode<T>>();\r\n            if (node !== null) {\r\n                queue.enqueue(node);\r\n            }\r\n            while (!queue.isEmpty()) {\r\n                node = queue.dequeue();\r\n                if (callback(node.element) === false) {\r\n                    return;\r\n                }\r\n                if (node.leftCh !== null) {\r\n                    queue.enqueue(node.leftCh);\r\n                }\r\n                if (node.rightCh !== null) {\r\n                    queue.enqueue(node.rightCh);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private preorderTraversalAux(node: BSTreeNode<T>, callback: ILoopFunction<T>, signal: { stop: boolean; }) {\r\n            if (node === null || signal.stop) {\r\n                return;\r\n            }\r\n            signal.stop = callback(node.element) === false;\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            this.preorderTraversalAux(node.leftCh, callback, signal);\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            this.preorderTraversalAux(node.rightCh, callback, signal);\r\n        }\r\n        /**\r\n        * @private\r\n        */\r\n        private postorderTraversalAux(node: BSTreeNode<T>, callback: ILoopFunction<T>, signal: { stop: boolean; }) {\r\n            if (node === null || signal.stop) {\r\n                return;\r\n            }\r\n            this.postorderTraversalAux(node.leftCh, callback, signal);\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            this.postorderTraversalAux(node.rightCh, callback, signal);\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            signal.stop = callback(node.element) === false;\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private minimumAux(node: BSTreeNode<T>): BSTreeNode<T> {\r\n            while (node.leftCh !== null) {\r\n                node = node.leftCh;\r\n            }\r\n            return node;\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private maximumAux(node: BSTreeNode<T>): BSTreeNode<T> {\r\n            while (node.rightCh !== null) {\r\n                node = node.rightCh;\r\n            }\r\n            return node;\r\n        }\r\n\r\n      /**\r\n        * @private\r\n        */\r\n        private heightAux(node: BSTreeNode<T>): number {\r\n            if (node === null) {\r\n                return -1;\r\n            }\r\n            return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\r\n        }\r\n\r\n        /*\r\n        * @private\r\n        */\r\n        private insertNode(node: BSTreeNode<T>): BSTreeNode<T> {\r\n\r\n            var parent: any = null;\r\n            var position = this.root;\r\n            var cmp:number = null;\r\n            while (position !== null) {\r\n                cmp = this.compare(node.element, position.element);\r\n                if (cmp === 0) {\r\n                    return null;\r\n                } else if (cmp < 0) {\r\n                    parent = position;\r\n                    position = position.leftCh;\r\n                } else {\r\n                    parent = position;\r\n                    position = position.rightCh;\r\n                }\r\n            }\r\n            node.parent = parent;\r\n            if (parent === null) {\r\n                // tree is empty\r\n                this.root = node;\r\n            } else if (this.compare(node.element, parent.element) < 0) {\r\n                parent.leftCh = node;\r\n            } else {\r\n                parent.rightCh = node;\r\n            }\r\n            return node;\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private createNode(element: T): BSTreeNode<T> {\r\n            return {\r\n                element: element,\r\n                leftCh: null,\r\n                rightCh: null,\r\n                parent: null\r\n            };\r\n        }\r\n\r\n    } // end of BSTree\r\n\r\n\r\n}// End of module "]}